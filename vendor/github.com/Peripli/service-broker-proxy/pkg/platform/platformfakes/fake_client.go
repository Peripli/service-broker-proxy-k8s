// Code generated by counterfeiter. DO NOT EDIT.
package platformfakes

import (
	"sync"

	"github.com/Peripli/service-broker-proxy/pkg/platform"
)

type FakeClient struct {
	GetBrokersStub        func() ([]platform.ServiceBroker, error)
	getBrokersMutex       sync.RWMutex
	getBrokersArgsForCall []struct{}
	getBrokersReturns     struct {
		result1 []platform.ServiceBroker
		result2 error
	}
	getBrokersReturnsOnCall map[int]struct {
		result1 []platform.ServiceBroker
		result2 error
	}
	CreateBrokerStub        func(r *platform.CreateServiceBrokerRequest) (*platform.ServiceBroker, error)
	createBrokerMutex       sync.RWMutex
	createBrokerArgsForCall []struct {
		r *platform.CreateServiceBrokerRequest
	}
	createBrokerReturns struct {
		result1 *platform.ServiceBroker
		result2 error
	}
	createBrokerReturnsOnCall map[int]struct {
		result1 *platform.ServiceBroker
		result2 error
	}
	DeleteBrokerStub        func(r *platform.DeleteServiceBrokerRequest) error
	deleteBrokerMutex       sync.RWMutex
	deleteBrokerArgsForCall []struct {
		r *platform.DeleteServiceBrokerRequest
	}
	deleteBrokerReturns struct {
		result1 error
	}
	deleteBrokerReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateBrokerStub        func(r *platform.UpdateServiceBrokerRequest) (*platform.ServiceBroker, error)
	updateBrokerMutex       sync.RWMutex
	updateBrokerArgsForCall []struct {
		r *platform.UpdateServiceBrokerRequest
	}
	updateBrokerReturns struct {
		result1 *platform.ServiceBroker
		result2 error
	}
	updateBrokerReturnsOnCall map[int]struct {
		result1 *platform.ServiceBroker
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) GetBrokers() ([]platform.ServiceBroker, error) {
	fake.getBrokersMutex.Lock()
	ret, specificReturn := fake.getBrokersReturnsOnCall[len(fake.getBrokersArgsForCall)]
	fake.getBrokersArgsForCall = append(fake.getBrokersArgsForCall, struct{}{})
	fake.recordInvocation("GetBrokers", []interface{}{})
	fake.getBrokersMutex.Unlock()
	if fake.GetBrokersStub != nil {
		return fake.GetBrokersStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getBrokersReturns.result1, fake.getBrokersReturns.result2
}

func (fake *FakeClient) GetBrokersCallCount() int {
	fake.getBrokersMutex.RLock()
	defer fake.getBrokersMutex.RUnlock()
	return len(fake.getBrokersArgsForCall)
}

func (fake *FakeClient) GetBrokersReturns(result1 []platform.ServiceBroker, result2 error) {
	fake.GetBrokersStub = nil
	fake.getBrokersReturns = struct {
		result1 []platform.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetBrokersReturnsOnCall(i int, result1 []platform.ServiceBroker, result2 error) {
	fake.GetBrokersStub = nil
	if fake.getBrokersReturnsOnCall == nil {
		fake.getBrokersReturnsOnCall = make(map[int]struct {
			result1 []platform.ServiceBroker
			result2 error
		})
	}
	fake.getBrokersReturnsOnCall[i] = struct {
		result1 []platform.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateBroker(r *platform.CreateServiceBrokerRequest) (*platform.ServiceBroker, error) {
	fake.createBrokerMutex.Lock()
	ret, specificReturn := fake.createBrokerReturnsOnCall[len(fake.createBrokerArgsForCall)]
	fake.createBrokerArgsForCall = append(fake.createBrokerArgsForCall, struct {
		r *platform.CreateServiceBrokerRequest
	}{r})
	fake.recordInvocation("CreateBroker", []interface{}{r})
	fake.createBrokerMutex.Unlock()
	if fake.CreateBrokerStub != nil {
		return fake.CreateBrokerStub(r)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createBrokerReturns.result1, fake.createBrokerReturns.result2
}

func (fake *FakeClient) CreateBrokerCallCount() int {
	fake.createBrokerMutex.RLock()
	defer fake.createBrokerMutex.RUnlock()
	return len(fake.createBrokerArgsForCall)
}

func (fake *FakeClient) CreateBrokerArgsForCall(i int) *platform.CreateServiceBrokerRequest {
	fake.createBrokerMutex.RLock()
	defer fake.createBrokerMutex.RUnlock()
	return fake.createBrokerArgsForCall[i].r
}

func (fake *FakeClient) CreateBrokerReturns(result1 *platform.ServiceBroker, result2 error) {
	fake.CreateBrokerStub = nil
	fake.createBrokerReturns = struct {
		result1 *platform.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateBrokerReturnsOnCall(i int, result1 *platform.ServiceBroker, result2 error) {
	fake.CreateBrokerStub = nil
	if fake.createBrokerReturnsOnCall == nil {
		fake.createBrokerReturnsOnCall = make(map[int]struct {
			result1 *platform.ServiceBroker
			result2 error
		})
	}
	fake.createBrokerReturnsOnCall[i] = struct {
		result1 *platform.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) DeleteBroker(r *platform.DeleteServiceBrokerRequest) error {
	fake.deleteBrokerMutex.Lock()
	ret, specificReturn := fake.deleteBrokerReturnsOnCall[len(fake.deleteBrokerArgsForCall)]
	fake.deleteBrokerArgsForCall = append(fake.deleteBrokerArgsForCall, struct {
		r *platform.DeleteServiceBrokerRequest
	}{r})
	fake.recordInvocation("DeleteBroker", []interface{}{r})
	fake.deleteBrokerMutex.Unlock()
	if fake.DeleteBrokerStub != nil {
		return fake.DeleteBrokerStub(r)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteBrokerReturns.result1
}

func (fake *FakeClient) DeleteBrokerCallCount() int {
	fake.deleteBrokerMutex.RLock()
	defer fake.deleteBrokerMutex.RUnlock()
	return len(fake.deleteBrokerArgsForCall)
}

func (fake *FakeClient) DeleteBrokerArgsForCall(i int) *platform.DeleteServiceBrokerRequest {
	fake.deleteBrokerMutex.RLock()
	defer fake.deleteBrokerMutex.RUnlock()
	return fake.deleteBrokerArgsForCall[i].r
}

func (fake *FakeClient) DeleteBrokerReturns(result1 error) {
	fake.DeleteBrokerStub = nil
	fake.deleteBrokerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteBrokerReturnsOnCall(i int, result1 error) {
	fake.DeleteBrokerStub = nil
	if fake.deleteBrokerReturnsOnCall == nil {
		fake.deleteBrokerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteBrokerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) UpdateBroker(r *platform.UpdateServiceBrokerRequest) (*platform.ServiceBroker, error) {
	fake.updateBrokerMutex.Lock()
	ret, specificReturn := fake.updateBrokerReturnsOnCall[len(fake.updateBrokerArgsForCall)]
	fake.updateBrokerArgsForCall = append(fake.updateBrokerArgsForCall, struct {
		r *platform.UpdateServiceBrokerRequest
	}{r})
	fake.recordInvocation("UpdateBroker", []interface{}{r})
	fake.updateBrokerMutex.Unlock()
	if fake.UpdateBrokerStub != nil {
		return fake.UpdateBrokerStub(r)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateBrokerReturns.result1, fake.updateBrokerReturns.result2
}

func (fake *FakeClient) UpdateBrokerCallCount() int {
	fake.updateBrokerMutex.RLock()
	defer fake.updateBrokerMutex.RUnlock()
	return len(fake.updateBrokerArgsForCall)
}

func (fake *FakeClient) UpdateBrokerArgsForCall(i int) *platform.UpdateServiceBrokerRequest {
	fake.updateBrokerMutex.RLock()
	defer fake.updateBrokerMutex.RUnlock()
	return fake.updateBrokerArgsForCall[i].r
}

func (fake *FakeClient) UpdateBrokerReturns(result1 *platform.ServiceBroker, result2 error) {
	fake.UpdateBrokerStub = nil
	fake.updateBrokerReturns = struct {
		result1 *platform.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) UpdateBrokerReturnsOnCall(i int, result1 *platform.ServiceBroker, result2 error) {
	fake.UpdateBrokerStub = nil
	if fake.updateBrokerReturnsOnCall == nil {
		fake.updateBrokerReturnsOnCall = make(map[int]struct {
			result1 *platform.ServiceBroker
			result2 error
		})
	}
	fake.updateBrokerReturnsOnCall[i] = struct {
		result1 *platform.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBrokersMutex.RLock()
	defer fake.getBrokersMutex.RUnlock()
	fake.createBrokerMutex.RLock()
	defer fake.createBrokerMutex.RUnlock()
	fake.deleteBrokerMutex.RLock()
	defer fake.deleteBrokerMutex.RUnlock()
	fake.updateBrokerMutex.RLock()
	defer fake.updateBrokerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ platform.Client = new(FakeClient)
