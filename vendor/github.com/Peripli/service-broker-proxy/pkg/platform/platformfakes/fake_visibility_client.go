// Code generated by counterfeiter. DO NOT EDIT.
package platformfakes

import (
	context "context"
	json "encoding/json"
	sync "sync"

	platform "github.com/Peripli/service-broker-proxy/pkg/platform"
)

type FakeVisibilityClient struct {
	DisableAccessForPlanStub        func(context.Context, json.RawMessage, string, string) error
	disableAccessForPlanMutex       sync.RWMutex
	disableAccessForPlanArgsForCall []struct {
		arg1 context.Context
		arg2 json.RawMessage
		arg3 string
		arg4 string
	}
	disableAccessForPlanReturns struct {
		result1 error
	}
	disableAccessForPlanReturnsOnCall map[int]struct {
		result1 error
	}
	EnableAccessForPlanStub        func(context.Context, json.RawMessage, string, string) error
	enableAccessForPlanMutex       sync.RWMutex
	enableAccessForPlanArgsForCall []struct {
		arg1 context.Context
		arg2 json.RawMessage
		arg3 string
		arg4 string
	}
	enableAccessForPlanReturns struct {
		result1 error
	}
	enableAccessForPlanReturnsOnCall map[int]struct {
		result1 error
	}
	GetVisibilitiesByBrokersStub        func(context.Context, []string) ([]*platform.ServiceVisibilityEntity, error)
	getVisibilitiesByBrokersMutex       sync.RWMutex
	getVisibilitiesByBrokersArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	getVisibilitiesByBrokersReturns struct {
		result1 []*platform.ServiceVisibilityEntity
		result2 error
	}
	getVisibilitiesByBrokersReturnsOnCall map[int]struct {
		result1 []*platform.ServiceVisibilityEntity
		result2 error
	}
	VisibilityScopeLabelKeyStub        func() string
	visibilityScopeLabelKeyMutex       sync.RWMutex
	visibilityScopeLabelKeyArgsForCall []struct {
	}
	visibilityScopeLabelKeyReturns struct {
		result1 string
	}
	visibilityScopeLabelKeyReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVisibilityClient) DisableAccessForPlan(arg1 context.Context, arg2 json.RawMessage, arg3 string, arg4 string) error {
	fake.disableAccessForPlanMutex.Lock()
	ret, specificReturn := fake.disableAccessForPlanReturnsOnCall[len(fake.disableAccessForPlanArgsForCall)]
	fake.disableAccessForPlanArgsForCall = append(fake.disableAccessForPlanArgsForCall, struct {
		arg1 context.Context
		arg2 json.RawMessage
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DisableAccessForPlan", []interface{}{arg1, arg2, arg3, arg4})
	fake.disableAccessForPlanMutex.Unlock()
	if fake.DisableAccessForPlanStub != nil {
		return fake.DisableAccessForPlanStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.disableAccessForPlanReturns
	return fakeReturns.result1
}

func (fake *FakeVisibilityClient) DisableAccessForPlanCallCount() int {
	fake.disableAccessForPlanMutex.RLock()
	defer fake.disableAccessForPlanMutex.RUnlock()
	return len(fake.disableAccessForPlanArgsForCall)
}

func (fake *FakeVisibilityClient) DisableAccessForPlanCalls(stub func(context.Context, json.RawMessage, string, string) error) {
	fake.disableAccessForPlanMutex.Lock()
	defer fake.disableAccessForPlanMutex.Unlock()
	fake.DisableAccessForPlanStub = stub
}

func (fake *FakeVisibilityClient) DisableAccessForPlanArgsForCall(i int) (context.Context, json.RawMessage, string, string) {
	fake.disableAccessForPlanMutex.RLock()
	defer fake.disableAccessForPlanMutex.RUnlock()
	argsForCall := fake.disableAccessForPlanArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeVisibilityClient) DisableAccessForPlanReturns(result1 error) {
	fake.disableAccessForPlanMutex.Lock()
	defer fake.disableAccessForPlanMutex.Unlock()
	fake.DisableAccessForPlanStub = nil
	fake.disableAccessForPlanReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVisibilityClient) DisableAccessForPlanReturnsOnCall(i int, result1 error) {
	fake.disableAccessForPlanMutex.Lock()
	defer fake.disableAccessForPlanMutex.Unlock()
	fake.DisableAccessForPlanStub = nil
	if fake.disableAccessForPlanReturnsOnCall == nil {
		fake.disableAccessForPlanReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.disableAccessForPlanReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVisibilityClient) EnableAccessForPlan(arg1 context.Context, arg2 json.RawMessage, arg3 string, arg4 string) error {
	fake.enableAccessForPlanMutex.Lock()
	ret, specificReturn := fake.enableAccessForPlanReturnsOnCall[len(fake.enableAccessForPlanArgsForCall)]
	fake.enableAccessForPlanArgsForCall = append(fake.enableAccessForPlanArgsForCall, struct {
		arg1 context.Context
		arg2 json.RawMessage
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("EnableAccessForPlan", []interface{}{arg1, arg2, arg3, arg4})
	fake.enableAccessForPlanMutex.Unlock()
	if fake.EnableAccessForPlanStub != nil {
		return fake.EnableAccessForPlanStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.enableAccessForPlanReturns
	return fakeReturns.result1
}

func (fake *FakeVisibilityClient) EnableAccessForPlanCallCount() int {
	fake.enableAccessForPlanMutex.RLock()
	defer fake.enableAccessForPlanMutex.RUnlock()
	return len(fake.enableAccessForPlanArgsForCall)
}

func (fake *FakeVisibilityClient) EnableAccessForPlanCalls(stub func(context.Context, json.RawMessage, string, string) error) {
	fake.enableAccessForPlanMutex.Lock()
	defer fake.enableAccessForPlanMutex.Unlock()
	fake.EnableAccessForPlanStub = stub
}

func (fake *FakeVisibilityClient) EnableAccessForPlanArgsForCall(i int) (context.Context, json.RawMessage, string, string) {
	fake.enableAccessForPlanMutex.RLock()
	defer fake.enableAccessForPlanMutex.RUnlock()
	argsForCall := fake.enableAccessForPlanArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeVisibilityClient) EnableAccessForPlanReturns(result1 error) {
	fake.enableAccessForPlanMutex.Lock()
	defer fake.enableAccessForPlanMutex.Unlock()
	fake.EnableAccessForPlanStub = nil
	fake.enableAccessForPlanReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVisibilityClient) EnableAccessForPlanReturnsOnCall(i int, result1 error) {
	fake.enableAccessForPlanMutex.Lock()
	defer fake.enableAccessForPlanMutex.Unlock()
	fake.EnableAccessForPlanStub = nil
	if fake.enableAccessForPlanReturnsOnCall == nil {
		fake.enableAccessForPlanReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.enableAccessForPlanReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVisibilityClient) GetVisibilitiesByBrokers(arg1 context.Context, arg2 []string) ([]*platform.ServiceVisibilityEntity, error) {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.getVisibilitiesByBrokersMutex.Lock()
	ret, specificReturn := fake.getVisibilitiesByBrokersReturnsOnCall[len(fake.getVisibilitiesByBrokersArgsForCall)]
	fake.getVisibilitiesByBrokersArgsForCall = append(fake.getVisibilitiesByBrokersArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2Copy})
	fake.recordInvocation("GetVisibilitiesByBrokers", []interface{}{arg1, arg2Copy})
	fake.getVisibilitiesByBrokersMutex.Unlock()
	if fake.GetVisibilitiesByBrokersStub != nil {
		return fake.GetVisibilitiesByBrokersStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getVisibilitiesByBrokersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVisibilityClient) GetVisibilitiesByBrokersCallCount() int {
	fake.getVisibilitiesByBrokersMutex.RLock()
	defer fake.getVisibilitiesByBrokersMutex.RUnlock()
	return len(fake.getVisibilitiesByBrokersArgsForCall)
}

func (fake *FakeVisibilityClient) GetVisibilitiesByBrokersCalls(stub func(context.Context, []string) ([]*platform.ServiceVisibilityEntity, error)) {
	fake.getVisibilitiesByBrokersMutex.Lock()
	defer fake.getVisibilitiesByBrokersMutex.Unlock()
	fake.GetVisibilitiesByBrokersStub = stub
}

func (fake *FakeVisibilityClient) GetVisibilitiesByBrokersArgsForCall(i int) (context.Context, []string) {
	fake.getVisibilitiesByBrokersMutex.RLock()
	defer fake.getVisibilitiesByBrokersMutex.RUnlock()
	argsForCall := fake.getVisibilitiesByBrokersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVisibilityClient) GetVisibilitiesByBrokersReturns(result1 []*platform.ServiceVisibilityEntity, result2 error) {
	fake.getVisibilitiesByBrokersMutex.Lock()
	defer fake.getVisibilitiesByBrokersMutex.Unlock()
	fake.GetVisibilitiesByBrokersStub = nil
	fake.getVisibilitiesByBrokersReturns = struct {
		result1 []*platform.ServiceVisibilityEntity
		result2 error
	}{result1, result2}
}

func (fake *FakeVisibilityClient) GetVisibilitiesByBrokersReturnsOnCall(i int, result1 []*platform.ServiceVisibilityEntity, result2 error) {
	fake.getVisibilitiesByBrokersMutex.Lock()
	defer fake.getVisibilitiesByBrokersMutex.Unlock()
	fake.GetVisibilitiesByBrokersStub = nil
	if fake.getVisibilitiesByBrokersReturnsOnCall == nil {
		fake.getVisibilitiesByBrokersReturnsOnCall = make(map[int]struct {
			result1 []*platform.ServiceVisibilityEntity
			result2 error
		})
	}
	fake.getVisibilitiesByBrokersReturnsOnCall[i] = struct {
		result1 []*platform.ServiceVisibilityEntity
		result2 error
	}{result1, result2}
}

func (fake *FakeVisibilityClient) VisibilityScopeLabelKey() string {
	fake.visibilityScopeLabelKeyMutex.Lock()
	ret, specificReturn := fake.visibilityScopeLabelKeyReturnsOnCall[len(fake.visibilityScopeLabelKeyArgsForCall)]
	fake.visibilityScopeLabelKeyArgsForCall = append(fake.visibilityScopeLabelKeyArgsForCall, struct {
	}{})
	fake.recordInvocation("VisibilityScopeLabelKey", []interface{}{})
	fake.visibilityScopeLabelKeyMutex.Unlock()
	if fake.VisibilityScopeLabelKeyStub != nil {
		return fake.VisibilityScopeLabelKeyStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.visibilityScopeLabelKeyReturns
	return fakeReturns.result1
}

func (fake *FakeVisibilityClient) VisibilityScopeLabelKeyCallCount() int {
	fake.visibilityScopeLabelKeyMutex.RLock()
	defer fake.visibilityScopeLabelKeyMutex.RUnlock()
	return len(fake.visibilityScopeLabelKeyArgsForCall)
}

func (fake *FakeVisibilityClient) VisibilityScopeLabelKeyCalls(stub func() string) {
	fake.visibilityScopeLabelKeyMutex.Lock()
	defer fake.visibilityScopeLabelKeyMutex.Unlock()
	fake.VisibilityScopeLabelKeyStub = stub
}

func (fake *FakeVisibilityClient) VisibilityScopeLabelKeyReturns(result1 string) {
	fake.visibilityScopeLabelKeyMutex.Lock()
	defer fake.visibilityScopeLabelKeyMutex.Unlock()
	fake.VisibilityScopeLabelKeyStub = nil
	fake.visibilityScopeLabelKeyReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeVisibilityClient) VisibilityScopeLabelKeyReturnsOnCall(i int, result1 string) {
	fake.visibilityScopeLabelKeyMutex.Lock()
	defer fake.visibilityScopeLabelKeyMutex.Unlock()
	fake.VisibilityScopeLabelKeyStub = nil
	if fake.visibilityScopeLabelKeyReturnsOnCall == nil {
		fake.visibilityScopeLabelKeyReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.visibilityScopeLabelKeyReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeVisibilityClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.disableAccessForPlanMutex.RLock()
	defer fake.disableAccessForPlanMutex.RUnlock()
	fake.enableAccessForPlanMutex.RLock()
	defer fake.enableAccessForPlanMutex.RUnlock()
	fake.getVisibilitiesByBrokersMutex.RLock()
	defer fake.getVisibilitiesByBrokersMutex.RUnlock()
	fake.visibilityScopeLabelKeyMutex.RLock()
	defer fake.visibilityScopeLabelKeyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVisibilityClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ platform.VisibilityClient = new(FakeVisibilityClient)
