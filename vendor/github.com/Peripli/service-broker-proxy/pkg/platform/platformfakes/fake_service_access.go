// Code generated by counterfeiter. DO NOT EDIT.
package platformfakes

import (
	"encoding/json"
	"sync"

	"github.com/Peripli/service-broker-proxy/pkg/platform"
)

type FakeServiceAccess struct {
	EnableAccessForServiceStub        func(context json.RawMessage, serviceGUID string) error
	enableAccessForServiceMutex       sync.RWMutex
	enableAccessForServiceArgsForCall []struct {
		context     json.RawMessage
		serviceGUID string
	}
	enableAccessForServiceReturns struct {
		result1 error
	}
	enableAccessForServiceReturnsOnCall map[int]struct {
		result1 error
	}
	EnableAccessForPlanStub        func(context json.RawMessage, servicePlanGUID string) error
	enableAccessForPlanMutex       sync.RWMutex
	enableAccessForPlanArgsForCall []struct {
		context         json.RawMessage
		servicePlanGUID string
	}
	enableAccessForPlanReturns struct {
		result1 error
	}
	enableAccessForPlanReturnsOnCall map[int]struct {
		result1 error
	}
	DisableAccessForServiceStub        func(context json.RawMessage, serviceGUID string) error
	disableAccessForServiceMutex       sync.RWMutex
	disableAccessForServiceArgsForCall []struct {
		context     json.RawMessage
		serviceGUID string
	}
	disableAccessForServiceReturns struct {
		result1 error
	}
	disableAccessForServiceReturnsOnCall map[int]struct {
		result1 error
	}
	DisableAccessForPlanStub        func(context json.RawMessage, servicePlanGUID string) error
	disableAccessForPlanMutex       sync.RWMutex
	disableAccessForPlanArgsForCall []struct {
		context         json.RawMessage
		servicePlanGUID string
	}
	disableAccessForPlanReturns struct {
		result1 error
	}
	disableAccessForPlanReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceAccess) EnableAccessForService(context json.RawMessage, serviceGUID string) error {
	fake.enableAccessForServiceMutex.Lock()
	ret, specificReturn := fake.enableAccessForServiceReturnsOnCall[len(fake.enableAccessForServiceArgsForCall)]
	fake.enableAccessForServiceArgsForCall = append(fake.enableAccessForServiceArgsForCall, struct {
		context     json.RawMessage
		serviceGUID string
	}{context, serviceGUID})
	fake.recordInvocation("EnableAccessForService", []interface{}{context, serviceGUID})
	fake.enableAccessForServiceMutex.Unlock()
	if fake.EnableAccessForServiceStub != nil {
		return fake.EnableAccessForServiceStub(context, serviceGUID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.enableAccessForServiceReturns.result1
}

func (fake *FakeServiceAccess) EnableAccessForServiceCallCount() int {
	fake.enableAccessForServiceMutex.RLock()
	defer fake.enableAccessForServiceMutex.RUnlock()
	return len(fake.enableAccessForServiceArgsForCall)
}

func (fake *FakeServiceAccess) EnableAccessForServiceArgsForCall(i int) (json.RawMessage, string) {
	fake.enableAccessForServiceMutex.RLock()
	defer fake.enableAccessForServiceMutex.RUnlock()
	return fake.enableAccessForServiceArgsForCall[i].context, fake.enableAccessForServiceArgsForCall[i].serviceGUID
}

func (fake *FakeServiceAccess) EnableAccessForServiceReturns(result1 error) {
	fake.EnableAccessForServiceStub = nil
	fake.enableAccessForServiceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceAccess) EnableAccessForServiceReturnsOnCall(i int, result1 error) {
	fake.EnableAccessForServiceStub = nil
	if fake.enableAccessForServiceReturnsOnCall == nil {
		fake.enableAccessForServiceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.enableAccessForServiceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceAccess) EnableAccessForPlan(context json.RawMessage, servicePlanGUID string) error {
	fake.enableAccessForPlanMutex.Lock()
	ret, specificReturn := fake.enableAccessForPlanReturnsOnCall[len(fake.enableAccessForPlanArgsForCall)]
	fake.enableAccessForPlanArgsForCall = append(fake.enableAccessForPlanArgsForCall, struct {
		context         json.RawMessage
		servicePlanGUID string
	}{context, servicePlanGUID})
	fake.recordInvocation("EnableAccessForPlan", []interface{}{context, servicePlanGUID})
	fake.enableAccessForPlanMutex.Unlock()
	if fake.EnableAccessForPlanStub != nil {
		return fake.EnableAccessForPlanStub(context, servicePlanGUID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.enableAccessForPlanReturns.result1
}

func (fake *FakeServiceAccess) EnableAccessForPlanCallCount() int {
	fake.enableAccessForPlanMutex.RLock()
	defer fake.enableAccessForPlanMutex.RUnlock()
	return len(fake.enableAccessForPlanArgsForCall)
}

func (fake *FakeServiceAccess) EnableAccessForPlanArgsForCall(i int) (json.RawMessage, string) {
	fake.enableAccessForPlanMutex.RLock()
	defer fake.enableAccessForPlanMutex.RUnlock()
	return fake.enableAccessForPlanArgsForCall[i].context, fake.enableAccessForPlanArgsForCall[i].servicePlanGUID
}

func (fake *FakeServiceAccess) EnableAccessForPlanReturns(result1 error) {
	fake.EnableAccessForPlanStub = nil
	fake.enableAccessForPlanReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceAccess) EnableAccessForPlanReturnsOnCall(i int, result1 error) {
	fake.EnableAccessForPlanStub = nil
	if fake.enableAccessForPlanReturnsOnCall == nil {
		fake.enableAccessForPlanReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.enableAccessForPlanReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceAccess) DisableAccessForService(context json.RawMessage, serviceGUID string) error {
	fake.disableAccessForServiceMutex.Lock()
	ret, specificReturn := fake.disableAccessForServiceReturnsOnCall[len(fake.disableAccessForServiceArgsForCall)]
	fake.disableAccessForServiceArgsForCall = append(fake.disableAccessForServiceArgsForCall, struct {
		context     json.RawMessage
		serviceGUID string
	}{context, serviceGUID})
	fake.recordInvocation("DisableAccessForService", []interface{}{context, serviceGUID})
	fake.disableAccessForServiceMutex.Unlock()
	if fake.DisableAccessForServiceStub != nil {
		return fake.DisableAccessForServiceStub(context, serviceGUID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.disableAccessForServiceReturns.result1
}

func (fake *FakeServiceAccess) DisableAccessForServiceCallCount() int {
	fake.disableAccessForServiceMutex.RLock()
	defer fake.disableAccessForServiceMutex.RUnlock()
	return len(fake.disableAccessForServiceArgsForCall)
}

func (fake *FakeServiceAccess) DisableAccessForServiceArgsForCall(i int) (json.RawMessage, string) {
	fake.disableAccessForServiceMutex.RLock()
	defer fake.disableAccessForServiceMutex.RUnlock()
	return fake.disableAccessForServiceArgsForCall[i].context, fake.disableAccessForServiceArgsForCall[i].serviceGUID
}

func (fake *FakeServiceAccess) DisableAccessForServiceReturns(result1 error) {
	fake.DisableAccessForServiceStub = nil
	fake.disableAccessForServiceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceAccess) DisableAccessForServiceReturnsOnCall(i int, result1 error) {
	fake.DisableAccessForServiceStub = nil
	if fake.disableAccessForServiceReturnsOnCall == nil {
		fake.disableAccessForServiceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.disableAccessForServiceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceAccess) DisableAccessForPlan(context json.RawMessage, servicePlanGUID string) error {
	fake.disableAccessForPlanMutex.Lock()
	ret, specificReturn := fake.disableAccessForPlanReturnsOnCall[len(fake.disableAccessForPlanArgsForCall)]
	fake.disableAccessForPlanArgsForCall = append(fake.disableAccessForPlanArgsForCall, struct {
		context         json.RawMessage
		servicePlanGUID string
	}{context, servicePlanGUID})
	fake.recordInvocation("DisableAccessForPlan", []interface{}{context, servicePlanGUID})
	fake.disableAccessForPlanMutex.Unlock()
	if fake.DisableAccessForPlanStub != nil {
		return fake.DisableAccessForPlanStub(context, servicePlanGUID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.disableAccessForPlanReturns.result1
}

func (fake *FakeServiceAccess) DisableAccessForPlanCallCount() int {
	fake.disableAccessForPlanMutex.RLock()
	defer fake.disableAccessForPlanMutex.RUnlock()
	return len(fake.disableAccessForPlanArgsForCall)
}

func (fake *FakeServiceAccess) DisableAccessForPlanArgsForCall(i int) (json.RawMessage, string) {
	fake.disableAccessForPlanMutex.RLock()
	defer fake.disableAccessForPlanMutex.RUnlock()
	return fake.disableAccessForPlanArgsForCall[i].context, fake.disableAccessForPlanArgsForCall[i].servicePlanGUID
}

func (fake *FakeServiceAccess) DisableAccessForPlanReturns(result1 error) {
	fake.DisableAccessForPlanStub = nil
	fake.disableAccessForPlanReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceAccess) DisableAccessForPlanReturnsOnCall(i int, result1 error) {
	fake.DisableAccessForPlanStub = nil
	if fake.disableAccessForPlanReturnsOnCall == nil {
		fake.disableAccessForPlanReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.disableAccessForPlanReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceAccess) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.enableAccessForServiceMutex.RLock()
	defer fake.enableAccessForServiceMutex.RUnlock()
	fake.enableAccessForPlanMutex.RLock()
	defer fake.enableAccessForPlanMutex.RUnlock()
	fake.disableAccessForServiceMutex.RLock()
	defer fake.disableAccessForServiceMutex.RUnlock()
	fake.disableAccessForPlanMutex.RLock()
	defer fake.disableAccessForPlanMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceAccess) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ platform.ServiceAccess = new(FakeServiceAccess)
