// Code generated by counterfeiter. DO NOT EDIT.
package apifakes

import (
	"sync"

	"github.com/Peripli/service-broker-proxy-k8s/pkg/k8s/api"
	"github.com/kubernetes-sigs/service-catalog/pkg/apis/servicecatalog/v1beta1"
	v1 "k8s.io/api/core/v1"
	v1a "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type FakeKubernetesAPI struct {
	CreateClusterServiceBrokerStub        func(*v1beta1.ClusterServiceBroker) (*v1beta1.ClusterServiceBroker, error)
	createClusterServiceBrokerMutex       sync.RWMutex
	createClusterServiceBrokerArgsForCall []struct {
		arg1 *v1beta1.ClusterServiceBroker
	}
	createClusterServiceBrokerReturns struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}
	createClusterServiceBrokerReturnsOnCall map[int]struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}
	CreateNamespaceServiceBrokerStub        func(*v1beta1.ServiceBroker, string) (*v1beta1.ServiceBroker, error)
	createNamespaceServiceBrokerMutex       sync.RWMutex
	createNamespaceServiceBrokerArgsForCall []struct {
		arg1 *v1beta1.ServiceBroker
		arg2 string
	}
	createNamespaceServiceBrokerReturns struct {
		result1 *v1beta1.ServiceBroker
		result2 error
	}
	createNamespaceServiceBrokerReturnsOnCall map[int]struct {
		result1 *v1beta1.ServiceBroker
		result2 error
	}
	CreateSecretStub        func(*v1.Secret) (*v1.Secret, error)
	createSecretMutex       sync.RWMutex
	createSecretArgsForCall []struct {
		arg1 *v1.Secret
	}
	createSecretReturns struct {
		result1 *v1.Secret
		result2 error
	}
	createSecretReturnsOnCall map[int]struct {
		result1 *v1.Secret
		result2 error
	}
	DeleteClusterServiceBrokerStub        func(string, *v1a.DeleteOptions) error
	deleteClusterServiceBrokerMutex       sync.RWMutex
	deleteClusterServiceBrokerArgsForCall []struct {
		arg1 string
		arg2 *v1a.DeleteOptions
	}
	deleteClusterServiceBrokerReturns struct {
		result1 error
	}
	deleteClusterServiceBrokerReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteNamespaceServiceBrokerStub        func(string, string, *v1a.DeleteOptions) error
	deleteNamespaceServiceBrokerMutex       sync.RWMutex
	deleteNamespaceServiceBrokerArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 *v1a.DeleteOptions
	}
	deleteNamespaceServiceBrokerReturns struct {
		result1 error
	}
	deleteNamespaceServiceBrokerReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteSecretStub        func(string, string) error
	deleteSecretMutex       sync.RWMutex
	deleteSecretArgsForCall []struct {
		arg1 string
		arg2 string
	}
	deleteSecretReturns struct {
		result1 error
	}
	deleteSecretReturnsOnCall map[int]struct {
		result1 error
	}
	RetrieveClusterServiceBrokerByNameStub        func(string) (*v1beta1.ClusterServiceBroker, error)
	retrieveClusterServiceBrokerByNameMutex       sync.RWMutex
	retrieveClusterServiceBrokerByNameArgsForCall []struct {
		arg1 string
	}
	retrieveClusterServiceBrokerByNameReturns struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}
	retrieveClusterServiceBrokerByNameReturnsOnCall map[int]struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}
	RetrieveClusterServiceBrokersStub        func() (*v1beta1.ClusterServiceBrokerList, error)
	retrieveClusterServiceBrokersMutex       sync.RWMutex
	retrieveClusterServiceBrokersArgsForCall []struct {
	}
	retrieveClusterServiceBrokersReturns struct {
		result1 *v1beta1.ClusterServiceBrokerList
		result2 error
	}
	retrieveClusterServiceBrokersReturnsOnCall map[int]struct {
		result1 *v1beta1.ClusterServiceBrokerList
		result2 error
	}
	RetrieveNamespaceServiceBrokerByNameStub        func(string, string) (*v1beta1.ServiceBroker, error)
	retrieveNamespaceServiceBrokerByNameMutex       sync.RWMutex
	retrieveNamespaceServiceBrokerByNameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	retrieveNamespaceServiceBrokerByNameReturns struct {
		result1 *v1beta1.ServiceBroker
		result2 error
	}
	retrieveNamespaceServiceBrokerByNameReturnsOnCall map[int]struct {
		result1 *v1beta1.ServiceBroker
		result2 error
	}
	RetrieveNamespaceServiceBrokersStub        func(string) (*v1beta1.ServiceBrokerList, error)
	retrieveNamespaceServiceBrokersMutex       sync.RWMutex
	retrieveNamespaceServiceBrokersArgsForCall []struct {
		arg1 string
	}
	retrieveNamespaceServiceBrokersReturns struct {
		result1 *v1beta1.ServiceBrokerList
		result2 error
	}
	retrieveNamespaceServiceBrokersReturnsOnCall map[int]struct {
		result1 *v1beta1.ServiceBrokerList
		result2 error
	}
	SyncClusterServiceBrokerStub        func(string, int) error
	syncClusterServiceBrokerMutex       sync.RWMutex
	syncClusterServiceBrokerArgsForCall []struct {
		arg1 string
		arg2 int
	}
	syncClusterServiceBrokerReturns struct {
		result1 error
	}
	syncClusterServiceBrokerReturnsOnCall map[int]struct {
		result1 error
	}
	SyncNamespaceServiceBrokerStub        func(string, string, int) error
	syncNamespaceServiceBrokerMutex       sync.RWMutex
	syncNamespaceServiceBrokerArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 int
	}
	syncNamespaceServiceBrokerReturns struct {
		result1 error
	}
	syncNamespaceServiceBrokerReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateClusterServiceBrokerStub        func(*v1beta1.ClusterServiceBroker) (*v1beta1.ClusterServiceBroker, error)
	updateClusterServiceBrokerMutex       sync.RWMutex
	updateClusterServiceBrokerArgsForCall []struct {
		arg1 *v1beta1.ClusterServiceBroker
	}
	updateClusterServiceBrokerReturns struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}
	updateClusterServiceBrokerReturnsOnCall map[int]struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}
	UpdateNamespaceServiceBrokerStub        func(*v1beta1.ServiceBroker, string) (*v1beta1.ServiceBroker, error)
	updateNamespaceServiceBrokerMutex       sync.RWMutex
	updateNamespaceServiceBrokerArgsForCall []struct {
		arg1 *v1beta1.ServiceBroker
		arg2 string
	}
	updateNamespaceServiceBrokerReturns struct {
		result1 *v1beta1.ServiceBroker
		result2 error
	}
	updateNamespaceServiceBrokerReturnsOnCall map[int]struct {
		result1 *v1beta1.ServiceBroker
		result2 error
	}
	UpdateServiceBrokerCredentialsStub        func(*v1.Secret) (*v1.Secret, error)
	updateServiceBrokerCredentialsMutex       sync.RWMutex
	updateServiceBrokerCredentialsArgsForCall []struct {
		arg1 *v1.Secret
	}
	updateServiceBrokerCredentialsReturns struct {
		result1 *v1.Secret
		result2 error
	}
	updateServiceBrokerCredentialsReturnsOnCall map[int]struct {
		result1 *v1.Secret
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeKubernetesAPI) CreateClusterServiceBroker(arg1 *v1beta1.ClusterServiceBroker) (*v1beta1.ClusterServiceBroker, error) {
	fake.createClusterServiceBrokerMutex.Lock()
	ret, specificReturn := fake.createClusterServiceBrokerReturnsOnCall[len(fake.createClusterServiceBrokerArgsForCall)]
	fake.createClusterServiceBrokerArgsForCall = append(fake.createClusterServiceBrokerArgsForCall, struct {
		arg1 *v1beta1.ClusterServiceBroker
	}{arg1})
	fake.recordInvocation("CreateClusterServiceBroker", []interface{}{arg1})
	fake.createClusterServiceBrokerMutex.Unlock()
	if fake.CreateClusterServiceBrokerStub != nil {
		return fake.CreateClusterServiceBrokerStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createClusterServiceBrokerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubernetesAPI) CreateClusterServiceBrokerCallCount() int {
	fake.createClusterServiceBrokerMutex.RLock()
	defer fake.createClusterServiceBrokerMutex.RUnlock()
	return len(fake.createClusterServiceBrokerArgsForCall)
}

func (fake *FakeKubernetesAPI) CreateClusterServiceBrokerCalls(stub func(*v1beta1.ClusterServiceBroker) (*v1beta1.ClusterServiceBroker, error)) {
	fake.createClusterServiceBrokerMutex.Lock()
	defer fake.createClusterServiceBrokerMutex.Unlock()
	fake.CreateClusterServiceBrokerStub = stub
}

func (fake *FakeKubernetesAPI) CreateClusterServiceBrokerArgsForCall(i int) *v1beta1.ClusterServiceBroker {
	fake.createClusterServiceBrokerMutex.RLock()
	defer fake.createClusterServiceBrokerMutex.RUnlock()
	argsForCall := fake.createClusterServiceBrokerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKubernetesAPI) CreateClusterServiceBrokerReturns(result1 *v1beta1.ClusterServiceBroker, result2 error) {
	fake.createClusterServiceBrokerMutex.Lock()
	defer fake.createClusterServiceBrokerMutex.Unlock()
	fake.CreateClusterServiceBrokerStub = nil
	fake.createClusterServiceBrokerReturns = struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) CreateClusterServiceBrokerReturnsOnCall(i int, result1 *v1beta1.ClusterServiceBroker, result2 error) {
	fake.createClusterServiceBrokerMutex.Lock()
	defer fake.createClusterServiceBrokerMutex.Unlock()
	fake.CreateClusterServiceBrokerStub = nil
	if fake.createClusterServiceBrokerReturnsOnCall == nil {
		fake.createClusterServiceBrokerReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.ClusterServiceBroker
			result2 error
		})
	}
	fake.createClusterServiceBrokerReturnsOnCall[i] = struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) CreateNamespaceServiceBroker(arg1 *v1beta1.ServiceBroker, arg2 string) (*v1beta1.ServiceBroker, error) {
	fake.createNamespaceServiceBrokerMutex.Lock()
	ret, specificReturn := fake.createNamespaceServiceBrokerReturnsOnCall[len(fake.createNamespaceServiceBrokerArgsForCall)]
	fake.createNamespaceServiceBrokerArgsForCall = append(fake.createNamespaceServiceBrokerArgsForCall, struct {
		arg1 *v1beta1.ServiceBroker
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("CreateNamespaceServiceBroker", []interface{}{arg1, arg2})
	fake.createNamespaceServiceBrokerMutex.Unlock()
	if fake.CreateNamespaceServiceBrokerStub != nil {
		return fake.CreateNamespaceServiceBrokerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNamespaceServiceBrokerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubernetesAPI) CreateNamespaceServiceBrokerCallCount() int {
	fake.createNamespaceServiceBrokerMutex.RLock()
	defer fake.createNamespaceServiceBrokerMutex.RUnlock()
	return len(fake.createNamespaceServiceBrokerArgsForCall)
}

func (fake *FakeKubernetesAPI) CreateNamespaceServiceBrokerCalls(stub func(*v1beta1.ServiceBroker, string) (*v1beta1.ServiceBroker, error)) {
	fake.createNamespaceServiceBrokerMutex.Lock()
	defer fake.createNamespaceServiceBrokerMutex.Unlock()
	fake.CreateNamespaceServiceBrokerStub = stub
}

func (fake *FakeKubernetesAPI) CreateNamespaceServiceBrokerArgsForCall(i int) (*v1beta1.ServiceBroker, string) {
	fake.createNamespaceServiceBrokerMutex.RLock()
	defer fake.createNamespaceServiceBrokerMutex.RUnlock()
	argsForCall := fake.createNamespaceServiceBrokerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeKubernetesAPI) CreateNamespaceServiceBrokerReturns(result1 *v1beta1.ServiceBroker, result2 error) {
	fake.createNamespaceServiceBrokerMutex.Lock()
	defer fake.createNamespaceServiceBrokerMutex.Unlock()
	fake.CreateNamespaceServiceBrokerStub = nil
	fake.createNamespaceServiceBrokerReturns = struct {
		result1 *v1beta1.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) CreateNamespaceServiceBrokerReturnsOnCall(i int, result1 *v1beta1.ServiceBroker, result2 error) {
	fake.createNamespaceServiceBrokerMutex.Lock()
	defer fake.createNamespaceServiceBrokerMutex.Unlock()
	fake.CreateNamespaceServiceBrokerStub = nil
	if fake.createNamespaceServiceBrokerReturnsOnCall == nil {
		fake.createNamespaceServiceBrokerReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.ServiceBroker
			result2 error
		})
	}
	fake.createNamespaceServiceBrokerReturnsOnCall[i] = struct {
		result1 *v1beta1.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) CreateSecret(arg1 *v1.Secret) (*v1.Secret, error) {
	fake.createSecretMutex.Lock()
	ret, specificReturn := fake.createSecretReturnsOnCall[len(fake.createSecretArgsForCall)]
	fake.createSecretArgsForCall = append(fake.createSecretArgsForCall, struct {
		arg1 *v1.Secret
	}{arg1})
	fake.recordInvocation("CreateSecret", []interface{}{arg1})
	fake.createSecretMutex.Unlock()
	if fake.CreateSecretStub != nil {
		return fake.CreateSecretStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSecretReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubernetesAPI) CreateSecretCallCount() int {
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	return len(fake.createSecretArgsForCall)
}

func (fake *FakeKubernetesAPI) CreateSecretCalls(stub func(*v1.Secret) (*v1.Secret, error)) {
	fake.createSecretMutex.Lock()
	defer fake.createSecretMutex.Unlock()
	fake.CreateSecretStub = stub
}

func (fake *FakeKubernetesAPI) CreateSecretArgsForCall(i int) *v1.Secret {
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	argsForCall := fake.createSecretArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKubernetesAPI) CreateSecretReturns(result1 *v1.Secret, result2 error) {
	fake.createSecretMutex.Lock()
	defer fake.createSecretMutex.Unlock()
	fake.CreateSecretStub = nil
	fake.createSecretReturns = struct {
		result1 *v1.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) CreateSecretReturnsOnCall(i int, result1 *v1.Secret, result2 error) {
	fake.createSecretMutex.Lock()
	defer fake.createSecretMutex.Unlock()
	fake.CreateSecretStub = nil
	if fake.createSecretReturnsOnCall == nil {
		fake.createSecretReturnsOnCall = make(map[int]struct {
			result1 *v1.Secret
			result2 error
		})
	}
	fake.createSecretReturnsOnCall[i] = struct {
		result1 *v1.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) DeleteClusterServiceBroker(arg1 string, arg2 *v1a.DeleteOptions) error {
	fake.deleteClusterServiceBrokerMutex.Lock()
	ret, specificReturn := fake.deleteClusterServiceBrokerReturnsOnCall[len(fake.deleteClusterServiceBrokerArgsForCall)]
	fake.deleteClusterServiceBrokerArgsForCall = append(fake.deleteClusterServiceBrokerArgsForCall, struct {
		arg1 string
		arg2 *v1a.DeleteOptions
	}{arg1, arg2})
	fake.recordInvocation("DeleteClusterServiceBroker", []interface{}{arg1, arg2})
	fake.deleteClusterServiceBrokerMutex.Unlock()
	if fake.DeleteClusterServiceBrokerStub != nil {
		return fake.DeleteClusterServiceBrokerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteClusterServiceBrokerReturns
	return fakeReturns.result1
}

func (fake *FakeKubernetesAPI) DeleteClusterServiceBrokerCallCount() int {
	fake.deleteClusterServiceBrokerMutex.RLock()
	defer fake.deleteClusterServiceBrokerMutex.RUnlock()
	return len(fake.deleteClusterServiceBrokerArgsForCall)
}

func (fake *FakeKubernetesAPI) DeleteClusterServiceBrokerCalls(stub func(string, *v1a.DeleteOptions) error) {
	fake.deleteClusterServiceBrokerMutex.Lock()
	defer fake.deleteClusterServiceBrokerMutex.Unlock()
	fake.DeleteClusterServiceBrokerStub = stub
}

func (fake *FakeKubernetesAPI) DeleteClusterServiceBrokerArgsForCall(i int) (string, *v1a.DeleteOptions) {
	fake.deleteClusterServiceBrokerMutex.RLock()
	defer fake.deleteClusterServiceBrokerMutex.RUnlock()
	argsForCall := fake.deleteClusterServiceBrokerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeKubernetesAPI) DeleteClusterServiceBrokerReturns(result1 error) {
	fake.deleteClusterServiceBrokerMutex.Lock()
	defer fake.deleteClusterServiceBrokerMutex.Unlock()
	fake.DeleteClusterServiceBrokerStub = nil
	fake.deleteClusterServiceBrokerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeKubernetesAPI) DeleteClusterServiceBrokerReturnsOnCall(i int, result1 error) {
	fake.deleteClusterServiceBrokerMutex.Lock()
	defer fake.deleteClusterServiceBrokerMutex.Unlock()
	fake.DeleteClusterServiceBrokerStub = nil
	if fake.deleteClusterServiceBrokerReturnsOnCall == nil {
		fake.deleteClusterServiceBrokerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteClusterServiceBrokerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeKubernetesAPI) DeleteNamespaceServiceBroker(arg1 string, arg2 string, arg3 *v1a.DeleteOptions) error {
	fake.deleteNamespaceServiceBrokerMutex.Lock()
	ret, specificReturn := fake.deleteNamespaceServiceBrokerReturnsOnCall[len(fake.deleteNamespaceServiceBrokerArgsForCall)]
	fake.deleteNamespaceServiceBrokerArgsForCall = append(fake.deleteNamespaceServiceBrokerArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 *v1a.DeleteOptions
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteNamespaceServiceBroker", []interface{}{arg1, arg2, arg3})
	fake.deleteNamespaceServiceBrokerMutex.Unlock()
	if fake.DeleteNamespaceServiceBrokerStub != nil {
		return fake.DeleteNamespaceServiceBrokerStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteNamespaceServiceBrokerReturns
	return fakeReturns.result1
}

func (fake *FakeKubernetesAPI) DeleteNamespaceServiceBrokerCallCount() int {
	fake.deleteNamespaceServiceBrokerMutex.RLock()
	defer fake.deleteNamespaceServiceBrokerMutex.RUnlock()
	return len(fake.deleteNamespaceServiceBrokerArgsForCall)
}

func (fake *FakeKubernetesAPI) DeleteNamespaceServiceBrokerCalls(stub func(string, string, *v1a.DeleteOptions) error) {
	fake.deleteNamespaceServiceBrokerMutex.Lock()
	defer fake.deleteNamespaceServiceBrokerMutex.Unlock()
	fake.DeleteNamespaceServiceBrokerStub = stub
}

func (fake *FakeKubernetesAPI) DeleteNamespaceServiceBrokerArgsForCall(i int) (string, string, *v1a.DeleteOptions) {
	fake.deleteNamespaceServiceBrokerMutex.RLock()
	defer fake.deleteNamespaceServiceBrokerMutex.RUnlock()
	argsForCall := fake.deleteNamespaceServiceBrokerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeKubernetesAPI) DeleteNamespaceServiceBrokerReturns(result1 error) {
	fake.deleteNamespaceServiceBrokerMutex.Lock()
	defer fake.deleteNamespaceServiceBrokerMutex.Unlock()
	fake.DeleteNamespaceServiceBrokerStub = nil
	fake.deleteNamespaceServiceBrokerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeKubernetesAPI) DeleteNamespaceServiceBrokerReturnsOnCall(i int, result1 error) {
	fake.deleteNamespaceServiceBrokerMutex.Lock()
	defer fake.deleteNamespaceServiceBrokerMutex.Unlock()
	fake.DeleteNamespaceServiceBrokerStub = nil
	if fake.deleteNamespaceServiceBrokerReturnsOnCall == nil {
		fake.deleteNamespaceServiceBrokerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteNamespaceServiceBrokerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeKubernetesAPI) DeleteSecret(arg1 string, arg2 string) error {
	fake.deleteSecretMutex.Lock()
	ret, specificReturn := fake.deleteSecretReturnsOnCall[len(fake.deleteSecretArgsForCall)]
	fake.deleteSecretArgsForCall = append(fake.deleteSecretArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("DeleteSecret", []interface{}{arg1, arg2})
	fake.deleteSecretMutex.Unlock()
	if fake.DeleteSecretStub != nil {
		return fake.DeleteSecretStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteSecretReturns
	return fakeReturns.result1
}

func (fake *FakeKubernetesAPI) DeleteSecretCallCount() int {
	fake.deleteSecretMutex.RLock()
	defer fake.deleteSecretMutex.RUnlock()
	return len(fake.deleteSecretArgsForCall)
}

func (fake *FakeKubernetesAPI) DeleteSecretCalls(stub func(string, string) error) {
	fake.deleteSecretMutex.Lock()
	defer fake.deleteSecretMutex.Unlock()
	fake.DeleteSecretStub = stub
}

func (fake *FakeKubernetesAPI) DeleteSecretArgsForCall(i int) (string, string) {
	fake.deleteSecretMutex.RLock()
	defer fake.deleteSecretMutex.RUnlock()
	argsForCall := fake.deleteSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeKubernetesAPI) DeleteSecretReturns(result1 error) {
	fake.deleteSecretMutex.Lock()
	defer fake.deleteSecretMutex.Unlock()
	fake.DeleteSecretStub = nil
	fake.deleteSecretReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeKubernetesAPI) DeleteSecretReturnsOnCall(i int, result1 error) {
	fake.deleteSecretMutex.Lock()
	defer fake.deleteSecretMutex.Unlock()
	fake.DeleteSecretStub = nil
	if fake.deleteSecretReturnsOnCall == nil {
		fake.deleteSecretReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteSecretReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokerByName(arg1 string) (*v1beta1.ClusterServiceBroker, error) {
	fake.retrieveClusterServiceBrokerByNameMutex.Lock()
	ret, specificReturn := fake.retrieveClusterServiceBrokerByNameReturnsOnCall[len(fake.retrieveClusterServiceBrokerByNameArgsForCall)]
	fake.retrieveClusterServiceBrokerByNameArgsForCall = append(fake.retrieveClusterServiceBrokerByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("RetrieveClusterServiceBrokerByName", []interface{}{arg1})
	fake.retrieveClusterServiceBrokerByNameMutex.Unlock()
	if fake.RetrieveClusterServiceBrokerByNameStub != nil {
		return fake.RetrieveClusterServiceBrokerByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.retrieveClusterServiceBrokerByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokerByNameCallCount() int {
	fake.retrieveClusterServiceBrokerByNameMutex.RLock()
	defer fake.retrieveClusterServiceBrokerByNameMutex.RUnlock()
	return len(fake.retrieveClusterServiceBrokerByNameArgsForCall)
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokerByNameCalls(stub func(string) (*v1beta1.ClusterServiceBroker, error)) {
	fake.retrieveClusterServiceBrokerByNameMutex.Lock()
	defer fake.retrieveClusterServiceBrokerByNameMutex.Unlock()
	fake.RetrieveClusterServiceBrokerByNameStub = stub
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokerByNameArgsForCall(i int) string {
	fake.retrieveClusterServiceBrokerByNameMutex.RLock()
	defer fake.retrieveClusterServiceBrokerByNameMutex.RUnlock()
	argsForCall := fake.retrieveClusterServiceBrokerByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokerByNameReturns(result1 *v1beta1.ClusterServiceBroker, result2 error) {
	fake.retrieveClusterServiceBrokerByNameMutex.Lock()
	defer fake.retrieveClusterServiceBrokerByNameMutex.Unlock()
	fake.RetrieveClusterServiceBrokerByNameStub = nil
	fake.retrieveClusterServiceBrokerByNameReturns = struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokerByNameReturnsOnCall(i int, result1 *v1beta1.ClusterServiceBroker, result2 error) {
	fake.retrieveClusterServiceBrokerByNameMutex.Lock()
	defer fake.retrieveClusterServiceBrokerByNameMutex.Unlock()
	fake.RetrieveClusterServiceBrokerByNameStub = nil
	if fake.retrieveClusterServiceBrokerByNameReturnsOnCall == nil {
		fake.retrieveClusterServiceBrokerByNameReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.ClusterServiceBroker
			result2 error
		})
	}
	fake.retrieveClusterServiceBrokerByNameReturnsOnCall[i] = struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokers() (*v1beta1.ClusterServiceBrokerList, error) {
	fake.retrieveClusterServiceBrokersMutex.Lock()
	ret, specificReturn := fake.retrieveClusterServiceBrokersReturnsOnCall[len(fake.retrieveClusterServiceBrokersArgsForCall)]
	fake.retrieveClusterServiceBrokersArgsForCall = append(fake.retrieveClusterServiceBrokersArgsForCall, struct {
	}{})
	fake.recordInvocation("RetrieveClusterServiceBrokers", []interface{}{})
	fake.retrieveClusterServiceBrokersMutex.Unlock()
	if fake.RetrieveClusterServiceBrokersStub != nil {
		return fake.RetrieveClusterServiceBrokersStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.retrieveClusterServiceBrokersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokersCallCount() int {
	fake.retrieveClusterServiceBrokersMutex.RLock()
	defer fake.retrieveClusterServiceBrokersMutex.RUnlock()
	return len(fake.retrieveClusterServiceBrokersArgsForCall)
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokersCalls(stub func() (*v1beta1.ClusterServiceBrokerList, error)) {
	fake.retrieveClusterServiceBrokersMutex.Lock()
	defer fake.retrieveClusterServiceBrokersMutex.Unlock()
	fake.RetrieveClusterServiceBrokersStub = stub
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokersReturns(result1 *v1beta1.ClusterServiceBrokerList, result2 error) {
	fake.retrieveClusterServiceBrokersMutex.Lock()
	defer fake.retrieveClusterServiceBrokersMutex.Unlock()
	fake.RetrieveClusterServiceBrokersStub = nil
	fake.retrieveClusterServiceBrokersReturns = struct {
		result1 *v1beta1.ClusterServiceBrokerList
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokersReturnsOnCall(i int, result1 *v1beta1.ClusterServiceBrokerList, result2 error) {
	fake.retrieveClusterServiceBrokersMutex.Lock()
	defer fake.retrieveClusterServiceBrokersMutex.Unlock()
	fake.RetrieveClusterServiceBrokersStub = nil
	if fake.retrieveClusterServiceBrokersReturnsOnCall == nil {
		fake.retrieveClusterServiceBrokersReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.ClusterServiceBrokerList
			result2 error
		})
	}
	fake.retrieveClusterServiceBrokersReturnsOnCall[i] = struct {
		result1 *v1beta1.ClusterServiceBrokerList
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) RetrieveNamespaceServiceBrokerByName(arg1 string, arg2 string) (*v1beta1.ServiceBroker, error) {
	fake.retrieveNamespaceServiceBrokerByNameMutex.Lock()
	ret, specificReturn := fake.retrieveNamespaceServiceBrokerByNameReturnsOnCall[len(fake.retrieveNamespaceServiceBrokerByNameArgsForCall)]
	fake.retrieveNamespaceServiceBrokerByNameArgsForCall = append(fake.retrieveNamespaceServiceBrokerByNameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RetrieveNamespaceServiceBrokerByName", []interface{}{arg1, arg2})
	fake.retrieveNamespaceServiceBrokerByNameMutex.Unlock()
	if fake.RetrieveNamespaceServiceBrokerByNameStub != nil {
		return fake.RetrieveNamespaceServiceBrokerByNameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.retrieveNamespaceServiceBrokerByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubernetesAPI) RetrieveNamespaceServiceBrokerByNameCallCount() int {
	fake.retrieveNamespaceServiceBrokerByNameMutex.RLock()
	defer fake.retrieveNamespaceServiceBrokerByNameMutex.RUnlock()
	return len(fake.retrieveNamespaceServiceBrokerByNameArgsForCall)
}

func (fake *FakeKubernetesAPI) RetrieveNamespaceServiceBrokerByNameCalls(stub func(string, string) (*v1beta1.ServiceBroker, error)) {
	fake.retrieveNamespaceServiceBrokerByNameMutex.Lock()
	defer fake.retrieveNamespaceServiceBrokerByNameMutex.Unlock()
	fake.RetrieveNamespaceServiceBrokerByNameStub = stub
}

func (fake *FakeKubernetesAPI) RetrieveNamespaceServiceBrokerByNameArgsForCall(i int) (string, string) {
	fake.retrieveNamespaceServiceBrokerByNameMutex.RLock()
	defer fake.retrieveNamespaceServiceBrokerByNameMutex.RUnlock()
	argsForCall := fake.retrieveNamespaceServiceBrokerByNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeKubernetesAPI) RetrieveNamespaceServiceBrokerByNameReturns(result1 *v1beta1.ServiceBroker, result2 error) {
	fake.retrieveNamespaceServiceBrokerByNameMutex.Lock()
	defer fake.retrieveNamespaceServiceBrokerByNameMutex.Unlock()
	fake.RetrieveNamespaceServiceBrokerByNameStub = nil
	fake.retrieveNamespaceServiceBrokerByNameReturns = struct {
		result1 *v1beta1.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) RetrieveNamespaceServiceBrokerByNameReturnsOnCall(i int, result1 *v1beta1.ServiceBroker, result2 error) {
	fake.retrieveNamespaceServiceBrokerByNameMutex.Lock()
	defer fake.retrieveNamespaceServiceBrokerByNameMutex.Unlock()
	fake.RetrieveNamespaceServiceBrokerByNameStub = nil
	if fake.retrieveNamespaceServiceBrokerByNameReturnsOnCall == nil {
		fake.retrieveNamespaceServiceBrokerByNameReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.ServiceBroker
			result2 error
		})
	}
	fake.retrieveNamespaceServiceBrokerByNameReturnsOnCall[i] = struct {
		result1 *v1beta1.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) RetrieveNamespaceServiceBrokers(arg1 string) (*v1beta1.ServiceBrokerList, error) {
	fake.retrieveNamespaceServiceBrokersMutex.Lock()
	ret, specificReturn := fake.retrieveNamespaceServiceBrokersReturnsOnCall[len(fake.retrieveNamespaceServiceBrokersArgsForCall)]
	fake.retrieveNamespaceServiceBrokersArgsForCall = append(fake.retrieveNamespaceServiceBrokersArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("RetrieveNamespaceServiceBrokers", []interface{}{arg1})
	fake.retrieveNamespaceServiceBrokersMutex.Unlock()
	if fake.RetrieveNamespaceServiceBrokersStub != nil {
		return fake.RetrieveNamespaceServiceBrokersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.retrieveNamespaceServiceBrokersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubernetesAPI) RetrieveNamespaceServiceBrokersCallCount() int {
	fake.retrieveNamespaceServiceBrokersMutex.RLock()
	defer fake.retrieveNamespaceServiceBrokersMutex.RUnlock()
	return len(fake.retrieveNamespaceServiceBrokersArgsForCall)
}

func (fake *FakeKubernetesAPI) RetrieveNamespaceServiceBrokersCalls(stub func(string) (*v1beta1.ServiceBrokerList, error)) {
	fake.retrieveNamespaceServiceBrokersMutex.Lock()
	defer fake.retrieveNamespaceServiceBrokersMutex.Unlock()
	fake.RetrieveNamespaceServiceBrokersStub = stub
}

func (fake *FakeKubernetesAPI) RetrieveNamespaceServiceBrokersArgsForCall(i int) string {
	fake.retrieveNamespaceServiceBrokersMutex.RLock()
	defer fake.retrieveNamespaceServiceBrokersMutex.RUnlock()
	argsForCall := fake.retrieveNamespaceServiceBrokersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKubernetesAPI) RetrieveNamespaceServiceBrokersReturns(result1 *v1beta1.ServiceBrokerList, result2 error) {
	fake.retrieveNamespaceServiceBrokersMutex.Lock()
	defer fake.retrieveNamespaceServiceBrokersMutex.Unlock()
	fake.RetrieveNamespaceServiceBrokersStub = nil
	fake.retrieveNamespaceServiceBrokersReturns = struct {
		result1 *v1beta1.ServiceBrokerList
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) RetrieveNamespaceServiceBrokersReturnsOnCall(i int, result1 *v1beta1.ServiceBrokerList, result2 error) {
	fake.retrieveNamespaceServiceBrokersMutex.Lock()
	defer fake.retrieveNamespaceServiceBrokersMutex.Unlock()
	fake.RetrieveNamespaceServiceBrokersStub = nil
	if fake.retrieveNamespaceServiceBrokersReturnsOnCall == nil {
		fake.retrieveNamespaceServiceBrokersReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.ServiceBrokerList
			result2 error
		})
	}
	fake.retrieveNamespaceServiceBrokersReturnsOnCall[i] = struct {
		result1 *v1beta1.ServiceBrokerList
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) SyncClusterServiceBroker(arg1 string, arg2 int) error {
	fake.syncClusterServiceBrokerMutex.Lock()
	ret, specificReturn := fake.syncClusterServiceBrokerReturnsOnCall[len(fake.syncClusterServiceBrokerArgsForCall)]
	fake.syncClusterServiceBrokerArgsForCall = append(fake.syncClusterServiceBrokerArgsForCall, struct {
		arg1 string
		arg2 int
	}{arg1, arg2})
	fake.recordInvocation("SyncClusterServiceBroker", []interface{}{arg1, arg2})
	fake.syncClusterServiceBrokerMutex.Unlock()
	if fake.SyncClusterServiceBrokerStub != nil {
		return fake.SyncClusterServiceBrokerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.syncClusterServiceBrokerReturns
	return fakeReturns.result1
}

func (fake *FakeKubernetesAPI) SyncClusterServiceBrokerCallCount() int {
	fake.syncClusterServiceBrokerMutex.RLock()
	defer fake.syncClusterServiceBrokerMutex.RUnlock()
	return len(fake.syncClusterServiceBrokerArgsForCall)
}

func (fake *FakeKubernetesAPI) SyncClusterServiceBrokerCalls(stub func(string, int) error) {
	fake.syncClusterServiceBrokerMutex.Lock()
	defer fake.syncClusterServiceBrokerMutex.Unlock()
	fake.SyncClusterServiceBrokerStub = stub
}

func (fake *FakeKubernetesAPI) SyncClusterServiceBrokerArgsForCall(i int) (string, int) {
	fake.syncClusterServiceBrokerMutex.RLock()
	defer fake.syncClusterServiceBrokerMutex.RUnlock()
	argsForCall := fake.syncClusterServiceBrokerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeKubernetesAPI) SyncClusterServiceBrokerReturns(result1 error) {
	fake.syncClusterServiceBrokerMutex.Lock()
	defer fake.syncClusterServiceBrokerMutex.Unlock()
	fake.SyncClusterServiceBrokerStub = nil
	fake.syncClusterServiceBrokerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeKubernetesAPI) SyncClusterServiceBrokerReturnsOnCall(i int, result1 error) {
	fake.syncClusterServiceBrokerMutex.Lock()
	defer fake.syncClusterServiceBrokerMutex.Unlock()
	fake.SyncClusterServiceBrokerStub = nil
	if fake.syncClusterServiceBrokerReturnsOnCall == nil {
		fake.syncClusterServiceBrokerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.syncClusterServiceBrokerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeKubernetesAPI) SyncNamespaceServiceBroker(arg1 string, arg2 string, arg3 int) error {
	fake.syncNamespaceServiceBrokerMutex.Lock()
	ret, specificReturn := fake.syncNamespaceServiceBrokerReturnsOnCall[len(fake.syncNamespaceServiceBrokerArgsForCall)]
	fake.syncNamespaceServiceBrokerArgsForCall = append(fake.syncNamespaceServiceBrokerArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	fake.recordInvocation("SyncNamespaceServiceBroker", []interface{}{arg1, arg2, arg3})
	fake.syncNamespaceServiceBrokerMutex.Unlock()
	if fake.SyncNamespaceServiceBrokerStub != nil {
		return fake.SyncNamespaceServiceBrokerStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.syncNamespaceServiceBrokerReturns
	return fakeReturns.result1
}

func (fake *FakeKubernetesAPI) SyncNamespaceServiceBrokerCallCount() int {
	fake.syncNamespaceServiceBrokerMutex.RLock()
	defer fake.syncNamespaceServiceBrokerMutex.RUnlock()
	return len(fake.syncNamespaceServiceBrokerArgsForCall)
}

func (fake *FakeKubernetesAPI) SyncNamespaceServiceBrokerCalls(stub func(string, string, int) error) {
	fake.syncNamespaceServiceBrokerMutex.Lock()
	defer fake.syncNamespaceServiceBrokerMutex.Unlock()
	fake.SyncNamespaceServiceBrokerStub = stub
}

func (fake *FakeKubernetesAPI) SyncNamespaceServiceBrokerArgsForCall(i int) (string, string, int) {
	fake.syncNamespaceServiceBrokerMutex.RLock()
	defer fake.syncNamespaceServiceBrokerMutex.RUnlock()
	argsForCall := fake.syncNamespaceServiceBrokerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeKubernetesAPI) SyncNamespaceServiceBrokerReturns(result1 error) {
	fake.syncNamespaceServiceBrokerMutex.Lock()
	defer fake.syncNamespaceServiceBrokerMutex.Unlock()
	fake.SyncNamespaceServiceBrokerStub = nil
	fake.syncNamespaceServiceBrokerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeKubernetesAPI) SyncNamespaceServiceBrokerReturnsOnCall(i int, result1 error) {
	fake.syncNamespaceServiceBrokerMutex.Lock()
	defer fake.syncNamespaceServiceBrokerMutex.Unlock()
	fake.SyncNamespaceServiceBrokerStub = nil
	if fake.syncNamespaceServiceBrokerReturnsOnCall == nil {
		fake.syncNamespaceServiceBrokerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.syncNamespaceServiceBrokerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeKubernetesAPI) UpdateClusterServiceBroker(arg1 *v1beta1.ClusterServiceBroker) (*v1beta1.ClusterServiceBroker, error) {
	fake.updateClusterServiceBrokerMutex.Lock()
	ret, specificReturn := fake.updateClusterServiceBrokerReturnsOnCall[len(fake.updateClusterServiceBrokerArgsForCall)]
	fake.updateClusterServiceBrokerArgsForCall = append(fake.updateClusterServiceBrokerArgsForCall, struct {
		arg1 *v1beta1.ClusterServiceBroker
	}{arg1})
	fake.recordInvocation("UpdateClusterServiceBroker", []interface{}{arg1})
	fake.updateClusterServiceBrokerMutex.Unlock()
	if fake.UpdateClusterServiceBrokerStub != nil {
		return fake.UpdateClusterServiceBrokerStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateClusterServiceBrokerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubernetesAPI) UpdateClusterServiceBrokerCallCount() int {
	fake.updateClusterServiceBrokerMutex.RLock()
	defer fake.updateClusterServiceBrokerMutex.RUnlock()
	return len(fake.updateClusterServiceBrokerArgsForCall)
}

func (fake *FakeKubernetesAPI) UpdateClusterServiceBrokerCalls(stub func(*v1beta1.ClusterServiceBroker) (*v1beta1.ClusterServiceBroker, error)) {
	fake.updateClusterServiceBrokerMutex.Lock()
	defer fake.updateClusterServiceBrokerMutex.Unlock()
	fake.UpdateClusterServiceBrokerStub = stub
}

func (fake *FakeKubernetesAPI) UpdateClusterServiceBrokerArgsForCall(i int) *v1beta1.ClusterServiceBroker {
	fake.updateClusterServiceBrokerMutex.RLock()
	defer fake.updateClusterServiceBrokerMutex.RUnlock()
	argsForCall := fake.updateClusterServiceBrokerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKubernetesAPI) UpdateClusterServiceBrokerReturns(result1 *v1beta1.ClusterServiceBroker, result2 error) {
	fake.updateClusterServiceBrokerMutex.Lock()
	defer fake.updateClusterServiceBrokerMutex.Unlock()
	fake.UpdateClusterServiceBrokerStub = nil
	fake.updateClusterServiceBrokerReturns = struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) UpdateClusterServiceBrokerReturnsOnCall(i int, result1 *v1beta1.ClusterServiceBroker, result2 error) {
	fake.updateClusterServiceBrokerMutex.Lock()
	defer fake.updateClusterServiceBrokerMutex.Unlock()
	fake.UpdateClusterServiceBrokerStub = nil
	if fake.updateClusterServiceBrokerReturnsOnCall == nil {
		fake.updateClusterServiceBrokerReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.ClusterServiceBroker
			result2 error
		})
	}
	fake.updateClusterServiceBrokerReturnsOnCall[i] = struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) UpdateNamespaceServiceBroker(arg1 *v1beta1.ServiceBroker, arg2 string) (*v1beta1.ServiceBroker, error) {
	fake.updateNamespaceServiceBrokerMutex.Lock()
	ret, specificReturn := fake.updateNamespaceServiceBrokerReturnsOnCall[len(fake.updateNamespaceServiceBrokerArgsForCall)]
	fake.updateNamespaceServiceBrokerArgsForCall = append(fake.updateNamespaceServiceBrokerArgsForCall, struct {
		arg1 *v1beta1.ServiceBroker
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("UpdateNamespaceServiceBroker", []interface{}{arg1, arg2})
	fake.updateNamespaceServiceBrokerMutex.Unlock()
	if fake.UpdateNamespaceServiceBrokerStub != nil {
		return fake.UpdateNamespaceServiceBrokerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateNamespaceServiceBrokerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubernetesAPI) UpdateNamespaceServiceBrokerCallCount() int {
	fake.updateNamespaceServiceBrokerMutex.RLock()
	defer fake.updateNamespaceServiceBrokerMutex.RUnlock()
	return len(fake.updateNamespaceServiceBrokerArgsForCall)
}

func (fake *FakeKubernetesAPI) UpdateNamespaceServiceBrokerCalls(stub func(*v1beta1.ServiceBroker, string) (*v1beta1.ServiceBroker, error)) {
	fake.updateNamespaceServiceBrokerMutex.Lock()
	defer fake.updateNamespaceServiceBrokerMutex.Unlock()
	fake.UpdateNamespaceServiceBrokerStub = stub
}

func (fake *FakeKubernetesAPI) UpdateNamespaceServiceBrokerArgsForCall(i int) (*v1beta1.ServiceBroker, string) {
	fake.updateNamespaceServiceBrokerMutex.RLock()
	defer fake.updateNamespaceServiceBrokerMutex.RUnlock()
	argsForCall := fake.updateNamespaceServiceBrokerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeKubernetesAPI) UpdateNamespaceServiceBrokerReturns(result1 *v1beta1.ServiceBroker, result2 error) {
	fake.updateNamespaceServiceBrokerMutex.Lock()
	defer fake.updateNamespaceServiceBrokerMutex.Unlock()
	fake.UpdateNamespaceServiceBrokerStub = nil
	fake.updateNamespaceServiceBrokerReturns = struct {
		result1 *v1beta1.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) UpdateNamespaceServiceBrokerReturnsOnCall(i int, result1 *v1beta1.ServiceBroker, result2 error) {
	fake.updateNamespaceServiceBrokerMutex.Lock()
	defer fake.updateNamespaceServiceBrokerMutex.Unlock()
	fake.UpdateNamespaceServiceBrokerStub = nil
	if fake.updateNamespaceServiceBrokerReturnsOnCall == nil {
		fake.updateNamespaceServiceBrokerReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.ServiceBroker
			result2 error
		})
	}
	fake.updateNamespaceServiceBrokerReturnsOnCall[i] = struct {
		result1 *v1beta1.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) UpdateServiceBrokerCredentials(arg1 *v1.Secret) (*v1.Secret, error) {
	fake.updateServiceBrokerCredentialsMutex.Lock()
	ret, specificReturn := fake.updateServiceBrokerCredentialsReturnsOnCall[len(fake.updateServiceBrokerCredentialsArgsForCall)]
	fake.updateServiceBrokerCredentialsArgsForCall = append(fake.updateServiceBrokerCredentialsArgsForCall, struct {
		arg1 *v1.Secret
	}{arg1})
	fake.recordInvocation("UpdateServiceBrokerCredentials", []interface{}{arg1})
	fake.updateServiceBrokerCredentialsMutex.Unlock()
	if fake.UpdateServiceBrokerCredentialsStub != nil {
		return fake.UpdateServiceBrokerCredentialsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateServiceBrokerCredentialsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubernetesAPI) UpdateServiceBrokerCredentialsCallCount() int {
	fake.updateServiceBrokerCredentialsMutex.RLock()
	defer fake.updateServiceBrokerCredentialsMutex.RUnlock()
	return len(fake.updateServiceBrokerCredentialsArgsForCall)
}

func (fake *FakeKubernetesAPI) UpdateServiceBrokerCredentialsCalls(stub func(*v1.Secret) (*v1.Secret, error)) {
	fake.updateServiceBrokerCredentialsMutex.Lock()
	defer fake.updateServiceBrokerCredentialsMutex.Unlock()
	fake.UpdateServiceBrokerCredentialsStub = stub
}

func (fake *FakeKubernetesAPI) UpdateServiceBrokerCredentialsArgsForCall(i int) *v1.Secret {
	fake.updateServiceBrokerCredentialsMutex.RLock()
	defer fake.updateServiceBrokerCredentialsMutex.RUnlock()
	argsForCall := fake.updateServiceBrokerCredentialsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKubernetesAPI) UpdateServiceBrokerCredentialsReturns(result1 *v1.Secret, result2 error) {
	fake.updateServiceBrokerCredentialsMutex.Lock()
	defer fake.updateServiceBrokerCredentialsMutex.Unlock()
	fake.UpdateServiceBrokerCredentialsStub = nil
	fake.updateServiceBrokerCredentialsReturns = struct {
		result1 *v1.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) UpdateServiceBrokerCredentialsReturnsOnCall(i int, result1 *v1.Secret, result2 error) {
	fake.updateServiceBrokerCredentialsMutex.Lock()
	defer fake.updateServiceBrokerCredentialsMutex.Unlock()
	fake.UpdateServiceBrokerCredentialsStub = nil
	if fake.updateServiceBrokerCredentialsReturnsOnCall == nil {
		fake.updateServiceBrokerCredentialsReturnsOnCall = make(map[int]struct {
			result1 *v1.Secret
			result2 error
		})
	}
	fake.updateServiceBrokerCredentialsReturnsOnCall[i] = struct {
		result1 *v1.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createClusterServiceBrokerMutex.RLock()
	defer fake.createClusterServiceBrokerMutex.RUnlock()
	fake.createNamespaceServiceBrokerMutex.RLock()
	defer fake.createNamespaceServiceBrokerMutex.RUnlock()
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	fake.deleteClusterServiceBrokerMutex.RLock()
	defer fake.deleteClusterServiceBrokerMutex.RUnlock()
	fake.deleteNamespaceServiceBrokerMutex.RLock()
	defer fake.deleteNamespaceServiceBrokerMutex.RUnlock()
	fake.deleteSecretMutex.RLock()
	defer fake.deleteSecretMutex.RUnlock()
	fake.retrieveClusterServiceBrokerByNameMutex.RLock()
	defer fake.retrieveClusterServiceBrokerByNameMutex.RUnlock()
	fake.retrieveClusterServiceBrokersMutex.RLock()
	defer fake.retrieveClusterServiceBrokersMutex.RUnlock()
	fake.retrieveNamespaceServiceBrokerByNameMutex.RLock()
	defer fake.retrieveNamespaceServiceBrokerByNameMutex.RUnlock()
	fake.retrieveNamespaceServiceBrokersMutex.RLock()
	defer fake.retrieveNamespaceServiceBrokersMutex.RUnlock()
	fake.syncClusterServiceBrokerMutex.RLock()
	defer fake.syncClusterServiceBrokerMutex.RUnlock()
	fake.syncNamespaceServiceBrokerMutex.RLock()
	defer fake.syncNamespaceServiceBrokerMutex.RUnlock()
	fake.updateClusterServiceBrokerMutex.RLock()
	defer fake.updateClusterServiceBrokerMutex.RUnlock()
	fake.updateNamespaceServiceBrokerMutex.RLock()
	defer fake.updateNamespaceServiceBrokerMutex.RUnlock()
	fake.updateServiceBrokerCredentialsMutex.RLock()
	defer fake.updateServiceBrokerCredentialsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeKubernetesAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.KubernetesAPI = new(FakeKubernetesAPI)
