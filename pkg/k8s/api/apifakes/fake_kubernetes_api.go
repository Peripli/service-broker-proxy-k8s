// Code generated by counterfeiter. DO NOT EDIT.
package apifakes

import (
	"sync"

	"github.com/Peripli/service-broker-proxy-k8s/pkg/k8s/api"
	"github.com/kubernetes-sigs/service-catalog/pkg/apis/servicecatalog/v1beta1"
	v1 "k8s.io/api/core/v1"
	v1a "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type FakeKubernetesAPI struct {
	CreateClusterServiceBrokerStub        func(*v1beta1.ClusterServiceBroker) (*v1beta1.ClusterServiceBroker, error)
	createClusterServiceBrokerMutex       sync.RWMutex
	createClusterServiceBrokerArgsForCall []struct {
		arg1 *v1beta1.ClusterServiceBroker
	}
	createClusterServiceBrokerReturns struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}
	createClusterServiceBrokerReturnsOnCall map[int]struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}
	CreateSecretStub        func(*v1.Secret) (*v1.Secret, error)
	createSecretMutex       sync.RWMutex
	createSecretArgsForCall []struct {
		arg1 *v1.Secret
	}
	createSecretReturns struct {
		result1 *v1.Secret
		result2 error
	}
	createSecretReturnsOnCall map[int]struct {
		result1 *v1.Secret
		result2 error
	}
	DeleteClusterServiceBrokerStub        func(string, *v1a.DeleteOptions) error
	deleteClusterServiceBrokerMutex       sync.RWMutex
	deleteClusterServiceBrokerArgsForCall []struct {
		arg1 string
		arg2 *v1a.DeleteOptions
	}
	deleteClusterServiceBrokerReturns struct {
		result1 error
	}
	deleteClusterServiceBrokerReturnsOnCall map[int]struct {
		result1 error
	}
	RetrieveClusterServiceBrokerByNameStub        func(string) (*v1beta1.ClusterServiceBroker, error)
	retrieveClusterServiceBrokerByNameMutex       sync.RWMutex
	retrieveClusterServiceBrokerByNameArgsForCall []struct {
		arg1 string
	}
	retrieveClusterServiceBrokerByNameReturns struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}
	retrieveClusterServiceBrokerByNameReturnsOnCall map[int]struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}
	RetrieveClusterServiceBrokersStub        func() (*v1beta1.ClusterServiceBrokerList, error)
	retrieveClusterServiceBrokersMutex       sync.RWMutex
	retrieveClusterServiceBrokersArgsForCall []struct {
	}
	retrieveClusterServiceBrokersReturns struct {
		result1 *v1beta1.ClusterServiceBrokerList
		result2 error
	}
	retrieveClusterServiceBrokersReturnsOnCall map[int]struct {
		result1 *v1beta1.ClusterServiceBrokerList
		result2 error
	}
	SyncClusterServiceBrokerStub        func(string, int) error
	syncClusterServiceBrokerMutex       sync.RWMutex
	syncClusterServiceBrokerArgsForCall []struct {
		arg1 string
		arg2 int
	}
	syncClusterServiceBrokerReturns struct {
		result1 error
	}
	syncClusterServiceBrokerReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateClusterServiceBrokerStub        func(*v1beta1.ClusterServiceBroker) (*v1beta1.ClusterServiceBroker, error)
	updateClusterServiceBrokerMutex       sync.RWMutex
	updateClusterServiceBrokerArgsForCall []struct {
		arg1 *v1beta1.ClusterServiceBroker
	}
	updateClusterServiceBrokerReturns struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}
	updateClusterServiceBrokerReturnsOnCall map[int]struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}
	UpdateClusterServiceBrokerCredentialsStub        func(*v1.Secret) (*v1.Secret, error)
	updateClusterServiceBrokerCredentialsMutex       sync.RWMutex
	updateClusterServiceBrokerCredentialsArgsForCall []struct {
		arg1 *v1.Secret
	}
	updateClusterServiceBrokerCredentialsReturns struct {
		result1 *v1.Secret
		result2 error
	}
	updateClusterServiceBrokerCredentialsReturnsOnCall map[int]struct {
		result1 *v1.Secret
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeKubernetesAPI) CreateClusterServiceBroker(arg1 *v1beta1.ClusterServiceBroker) (*v1beta1.ClusterServiceBroker, error) {
	fake.createClusterServiceBrokerMutex.Lock()
	ret, specificReturn := fake.createClusterServiceBrokerReturnsOnCall[len(fake.createClusterServiceBrokerArgsForCall)]
	fake.createClusterServiceBrokerArgsForCall = append(fake.createClusterServiceBrokerArgsForCall, struct {
		arg1 *v1beta1.ClusterServiceBroker
	}{arg1})
	fake.recordInvocation("CreateClusterServiceBroker", []interface{}{arg1})
	fake.createClusterServiceBrokerMutex.Unlock()
	if fake.CreateClusterServiceBrokerStub != nil {
		return fake.CreateClusterServiceBrokerStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createClusterServiceBrokerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubernetesAPI) CreateClusterServiceBrokerCallCount() int {
	fake.createClusterServiceBrokerMutex.RLock()
	defer fake.createClusterServiceBrokerMutex.RUnlock()
	return len(fake.createClusterServiceBrokerArgsForCall)
}

func (fake *FakeKubernetesAPI) CreateClusterServiceBrokerCalls(stub func(*v1beta1.ClusterServiceBroker) (*v1beta1.ClusterServiceBroker, error)) {
	fake.createClusterServiceBrokerMutex.Lock()
	defer fake.createClusterServiceBrokerMutex.Unlock()
	fake.CreateClusterServiceBrokerStub = stub
}

func (fake *FakeKubernetesAPI) CreateClusterServiceBrokerArgsForCall(i int) *v1beta1.ClusterServiceBroker {
	fake.createClusterServiceBrokerMutex.RLock()
	defer fake.createClusterServiceBrokerMutex.RUnlock()
	argsForCall := fake.createClusterServiceBrokerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKubernetesAPI) CreateClusterServiceBrokerReturns(result1 *v1beta1.ClusterServiceBroker, result2 error) {
	fake.createClusterServiceBrokerMutex.Lock()
	defer fake.createClusterServiceBrokerMutex.Unlock()
	fake.CreateClusterServiceBrokerStub = nil
	fake.createClusterServiceBrokerReturns = struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) CreateClusterServiceBrokerReturnsOnCall(i int, result1 *v1beta1.ClusterServiceBroker, result2 error) {
	fake.createClusterServiceBrokerMutex.Lock()
	defer fake.createClusterServiceBrokerMutex.Unlock()
	fake.CreateClusterServiceBrokerStub = nil
	if fake.createClusterServiceBrokerReturnsOnCall == nil {
		fake.createClusterServiceBrokerReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.ClusterServiceBroker
			result2 error
		})
	}
	fake.createClusterServiceBrokerReturnsOnCall[i] = struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) CreateSecret(arg1 *v1.Secret) (*v1.Secret, error) {
	fake.createSecretMutex.Lock()
	ret, specificReturn := fake.createSecretReturnsOnCall[len(fake.createSecretArgsForCall)]
	fake.createSecretArgsForCall = append(fake.createSecretArgsForCall, struct {
		arg1 *v1.Secret
	}{arg1})
	fake.recordInvocation("CreateSecret", []interface{}{arg1})
	fake.createSecretMutex.Unlock()
	if fake.CreateSecretStub != nil {
		return fake.CreateSecretStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSecretReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubernetesAPI) CreateSecretCallCount() int {
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	return len(fake.createSecretArgsForCall)
}

func (fake *FakeKubernetesAPI) CreateSecretCalls(stub func(*v1.Secret) (*v1.Secret, error)) {
	fake.createSecretMutex.Lock()
	defer fake.createSecretMutex.Unlock()
	fake.CreateSecretStub = stub
}

func (fake *FakeKubernetesAPI) CreateSecretArgsForCall(i int) *v1.Secret {
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	argsForCall := fake.createSecretArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKubernetesAPI) CreateSecretReturns(result1 *v1.Secret, result2 error) {
	fake.createSecretMutex.Lock()
	defer fake.createSecretMutex.Unlock()
	fake.CreateSecretStub = nil
	fake.createSecretReturns = struct {
		result1 *v1.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) CreateSecretReturnsOnCall(i int, result1 *v1.Secret, result2 error) {
	fake.createSecretMutex.Lock()
	defer fake.createSecretMutex.Unlock()
	fake.CreateSecretStub = nil
	if fake.createSecretReturnsOnCall == nil {
		fake.createSecretReturnsOnCall = make(map[int]struct {
			result1 *v1.Secret
			result2 error
		})
	}
	fake.createSecretReturnsOnCall[i] = struct {
		result1 *v1.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) DeleteClusterServiceBroker(arg1 string, arg2 *v1a.DeleteOptions) error {
	fake.deleteClusterServiceBrokerMutex.Lock()
	ret, specificReturn := fake.deleteClusterServiceBrokerReturnsOnCall[len(fake.deleteClusterServiceBrokerArgsForCall)]
	fake.deleteClusterServiceBrokerArgsForCall = append(fake.deleteClusterServiceBrokerArgsForCall, struct {
		arg1 string
		arg2 *v1a.DeleteOptions
	}{arg1, arg2})
	fake.recordInvocation("DeleteClusterServiceBroker", []interface{}{arg1, arg2})
	fake.deleteClusterServiceBrokerMutex.Unlock()
	if fake.DeleteClusterServiceBrokerStub != nil {
		return fake.DeleteClusterServiceBrokerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteClusterServiceBrokerReturns
	return fakeReturns.result1
}

func (fake *FakeKubernetesAPI) DeleteClusterServiceBrokerCallCount() int {
	fake.deleteClusterServiceBrokerMutex.RLock()
	defer fake.deleteClusterServiceBrokerMutex.RUnlock()
	return len(fake.deleteClusterServiceBrokerArgsForCall)
}

func (fake *FakeKubernetesAPI) DeleteClusterServiceBrokerCalls(stub func(string, *v1a.DeleteOptions) error) {
	fake.deleteClusterServiceBrokerMutex.Lock()
	defer fake.deleteClusterServiceBrokerMutex.Unlock()
	fake.DeleteClusterServiceBrokerStub = stub
}

func (fake *FakeKubernetesAPI) DeleteClusterServiceBrokerArgsForCall(i int) (string, *v1a.DeleteOptions) {
	fake.deleteClusterServiceBrokerMutex.RLock()
	defer fake.deleteClusterServiceBrokerMutex.RUnlock()
	argsForCall := fake.deleteClusterServiceBrokerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeKubernetesAPI) DeleteClusterServiceBrokerReturns(result1 error) {
	fake.deleteClusterServiceBrokerMutex.Lock()
	defer fake.deleteClusterServiceBrokerMutex.Unlock()
	fake.DeleteClusterServiceBrokerStub = nil
	fake.deleteClusterServiceBrokerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeKubernetesAPI) DeleteClusterServiceBrokerReturnsOnCall(i int, result1 error) {
	fake.deleteClusterServiceBrokerMutex.Lock()
	defer fake.deleteClusterServiceBrokerMutex.Unlock()
	fake.DeleteClusterServiceBrokerStub = nil
	if fake.deleteClusterServiceBrokerReturnsOnCall == nil {
		fake.deleteClusterServiceBrokerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteClusterServiceBrokerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokerByName(arg1 string) (*v1beta1.ClusterServiceBroker, error) {
	fake.retrieveClusterServiceBrokerByNameMutex.Lock()
	ret, specificReturn := fake.retrieveClusterServiceBrokerByNameReturnsOnCall[len(fake.retrieveClusterServiceBrokerByNameArgsForCall)]
	fake.retrieveClusterServiceBrokerByNameArgsForCall = append(fake.retrieveClusterServiceBrokerByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("RetrieveClusterServiceBrokerByName", []interface{}{arg1})
	fake.retrieveClusterServiceBrokerByNameMutex.Unlock()
	if fake.RetrieveClusterServiceBrokerByNameStub != nil {
		return fake.RetrieveClusterServiceBrokerByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.retrieveClusterServiceBrokerByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokerByNameCallCount() int {
	fake.retrieveClusterServiceBrokerByNameMutex.RLock()
	defer fake.retrieveClusterServiceBrokerByNameMutex.RUnlock()
	return len(fake.retrieveClusterServiceBrokerByNameArgsForCall)
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokerByNameCalls(stub func(string) (*v1beta1.ClusterServiceBroker, error)) {
	fake.retrieveClusterServiceBrokerByNameMutex.Lock()
	defer fake.retrieveClusterServiceBrokerByNameMutex.Unlock()
	fake.RetrieveClusterServiceBrokerByNameStub = stub
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokerByNameArgsForCall(i int) string {
	fake.retrieveClusterServiceBrokerByNameMutex.RLock()
	defer fake.retrieveClusterServiceBrokerByNameMutex.RUnlock()
	argsForCall := fake.retrieveClusterServiceBrokerByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokerByNameReturns(result1 *v1beta1.ClusterServiceBroker, result2 error) {
	fake.retrieveClusterServiceBrokerByNameMutex.Lock()
	defer fake.retrieveClusterServiceBrokerByNameMutex.Unlock()
	fake.RetrieveClusterServiceBrokerByNameStub = nil
	fake.retrieveClusterServiceBrokerByNameReturns = struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokerByNameReturnsOnCall(i int, result1 *v1beta1.ClusterServiceBroker, result2 error) {
	fake.retrieveClusterServiceBrokerByNameMutex.Lock()
	defer fake.retrieveClusterServiceBrokerByNameMutex.Unlock()
	fake.RetrieveClusterServiceBrokerByNameStub = nil
	if fake.retrieveClusterServiceBrokerByNameReturnsOnCall == nil {
		fake.retrieveClusterServiceBrokerByNameReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.ClusterServiceBroker
			result2 error
		})
	}
	fake.retrieveClusterServiceBrokerByNameReturnsOnCall[i] = struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokers() (*v1beta1.ClusterServiceBrokerList, error) {
	fake.retrieveClusterServiceBrokersMutex.Lock()
	ret, specificReturn := fake.retrieveClusterServiceBrokersReturnsOnCall[len(fake.retrieveClusterServiceBrokersArgsForCall)]
	fake.retrieveClusterServiceBrokersArgsForCall = append(fake.retrieveClusterServiceBrokersArgsForCall, struct {
	}{})
	fake.recordInvocation("RetrieveClusterServiceBrokers", []interface{}{})
	fake.retrieveClusterServiceBrokersMutex.Unlock()
	if fake.RetrieveClusterServiceBrokersStub != nil {
		return fake.RetrieveClusterServiceBrokersStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.retrieveClusterServiceBrokersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokersCallCount() int {
	fake.retrieveClusterServiceBrokersMutex.RLock()
	defer fake.retrieveClusterServiceBrokersMutex.RUnlock()
	return len(fake.retrieveClusterServiceBrokersArgsForCall)
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokersCalls(stub func() (*v1beta1.ClusterServiceBrokerList, error)) {
	fake.retrieveClusterServiceBrokersMutex.Lock()
	defer fake.retrieveClusterServiceBrokersMutex.Unlock()
	fake.RetrieveClusterServiceBrokersStub = stub
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokersReturns(result1 *v1beta1.ClusterServiceBrokerList, result2 error) {
	fake.retrieveClusterServiceBrokersMutex.Lock()
	defer fake.retrieveClusterServiceBrokersMutex.Unlock()
	fake.RetrieveClusterServiceBrokersStub = nil
	fake.retrieveClusterServiceBrokersReturns = struct {
		result1 *v1beta1.ClusterServiceBrokerList
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) RetrieveClusterServiceBrokersReturnsOnCall(i int, result1 *v1beta1.ClusterServiceBrokerList, result2 error) {
	fake.retrieveClusterServiceBrokersMutex.Lock()
	defer fake.retrieveClusterServiceBrokersMutex.Unlock()
	fake.RetrieveClusterServiceBrokersStub = nil
	if fake.retrieveClusterServiceBrokersReturnsOnCall == nil {
		fake.retrieveClusterServiceBrokersReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.ClusterServiceBrokerList
			result2 error
		})
	}
	fake.retrieveClusterServiceBrokersReturnsOnCall[i] = struct {
		result1 *v1beta1.ClusterServiceBrokerList
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) SyncClusterServiceBroker(arg1 string, arg2 int) error {
	fake.syncClusterServiceBrokerMutex.Lock()
	ret, specificReturn := fake.syncClusterServiceBrokerReturnsOnCall[len(fake.syncClusterServiceBrokerArgsForCall)]
	fake.syncClusterServiceBrokerArgsForCall = append(fake.syncClusterServiceBrokerArgsForCall, struct {
		arg1 string
		arg2 int
	}{arg1, arg2})
	fake.recordInvocation("SyncClusterServiceBroker", []interface{}{arg1, arg2})
	fake.syncClusterServiceBrokerMutex.Unlock()
	if fake.SyncClusterServiceBrokerStub != nil {
		return fake.SyncClusterServiceBrokerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.syncClusterServiceBrokerReturns
	return fakeReturns.result1
}

func (fake *FakeKubernetesAPI) SyncClusterServiceBrokerCallCount() int {
	fake.syncClusterServiceBrokerMutex.RLock()
	defer fake.syncClusterServiceBrokerMutex.RUnlock()
	return len(fake.syncClusterServiceBrokerArgsForCall)
}

func (fake *FakeKubernetesAPI) SyncClusterServiceBrokerCalls(stub func(string, int) error) {
	fake.syncClusterServiceBrokerMutex.Lock()
	defer fake.syncClusterServiceBrokerMutex.Unlock()
	fake.SyncClusterServiceBrokerStub = stub
}

func (fake *FakeKubernetesAPI) SyncClusterServiceBrokerArgsForCall(i int) (string, int) {
	fake.syncClusterServiceBrokerMutex.RLock()
	defer fake.syncClusterServiceBrokerMutex.RUnlock()
	argsForCall := fake.syncClusterServiceBrokerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeKubernetesAPI) SyncClusterServiceBrokerReturns(result1 error) {
	fake.syncClusterServiceBrokerMutex.Lock()
	defer fake.syncClusterServiceBrokerMutex.Unlock()
	fake.SyncClusterServiceBrokerStub = nil
	fake.syncClusterServiceBrokerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeKubernetesAPI) SyncClusterServiceBrokerReturnsOnCall(i int, result1 error) {
	fake.syncClusterServiceBrokerMutex.Lock()
	defer fake.syncClusterServiceBrokerMutex.Unlock()
	fake.SyncClusterServiceBrokerStub = nil
	if fake.syncClusterServiceBrokerReturnsOnCall == nil {
		fake.syncClusterServiceBrokerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.syncClusterServiceBrokerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeKubernetesAPI) UpdateClusterServiceBroker(arg1 *v1beta1.ClusterServiceBroker) (*v1beta1.ClusterServiceBroker, error) {
	fake.updateClusterServiceBrokerMutex.Lock()
	ret, specificReturn := fake.updateClusterServiceBrokerReturnsOnCall[len(fake.updateClusterServiceBrokerArgsForCall)]
	fake.updateClusterServiceBrokerArgsForCall = append(fake.updateClusterServiceBrokerArgsForCall, struct {
		arg1 *v1beta1.ClusterServiceBroker
	}{arg1})
	fake.recordInvocation("UpdateClusterServiceBroker", []interface{}{arg1})
	fake.updateClusterServiceBrokerMutex.Unlock()
	if fake.UpdateClusterServiceBrokerStub != nil {
		return fake.UpdateClusterServiceBrokerStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateClusterServiceBrokerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubernetesAPI) UpdateClusterServiceBrokerCallCount() int {
	fake.updateClusterServiceBrokerMutex.RLock()
	defer fake.updateClusterServiceBrokerMutex.RUnlock()
	return len(fake.updateClusterServiceBrokerArgsForCall)
}

func (fake *FakeKubernetesAPI) UpdateClusterServiceBrokerCalls(stub func(*v1beta1.ClusterServiceBroker) (*v1beta1.ClusterServiceBroker, error)) {
	fake.updateClusterServiceBrokerMutex.Lock()
	defer fake.updateClusterServiceBrokerMutex.Unlock()
	fake.UpdateClusterServiceBrokerStub = stub
}

func (fake *FakeKubernetesAPI) UpdateClusterServiceBrokerArgsForCall(i int) *v1beta1.ClusterServiceBroker {
	fake.updateClusterServiceBrokerMutex.RLock()
	defer fake.updateClusterServiceBrokerMutex.RUnlock()
	argsForCall := fake.updateClusterServiceBrokerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKubernetesAPI) UpdateClusterServiceBrokerReturns(result1 *v1beta1.ClusterServiceBroker, result2 error) {
	fake.updateClusterServiceBrokerMutex.Lock()
	defer fake.updateClusterServiceBrokerMutex.Unlock()
	fake.UpdateClusterServiceBrokerStub = nil
	fake.updateClusterServiceBrokerReturns = struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) UpdateClusterServiceBrokerReturnsOnCall(i int, result1 *v1beta1.ClusterServiceBroker, result2 error) {
	fake.updateClusterServiceBrokerMutex.Lock()
	defer fake.updateClusterServiceBrokerMutex.Unlock()
	fake.UpdateClusterServiceBrokerStub = nil
	if fake.updateClusterServiceBrokerReturnsOnCall == nil {
		fake.updateClusterServiceBrokerReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.ClusterServiceBroker
			result2 error
		})
	}
	fake.updateClusterServiceBrokerReturnsOnCall[i] = struct {
		result1 *v1beta1.ClusterServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) UpdateClusterServiceBrokerCredentials(arg1 *v1.Secret) (*v1.Secret, error) {
	fake.updateClusterServiceBrokerCredentialsMutex.Lock()
	ret, specificReturn := fake.updateClusterServiceBrokerCredentialsReturnsOnCall[len(fake.updateClusterServiceBrokerCredentialsArgsForCall)]
	fake.updateClusterServiceBrokerCredentialsArgsForCall = append(fake.updateClusterServiceBrokerCredentialsArgsForCall, struct {
		arg1 *v1.Secret
	}{arg1})
	fake.recordInvocation("UpdateClusterServiceBrokerCredentials", []interface{}{arg1})
	fake.updateClusterServiceBrokerCredentialsMutex.Unlock()
	if fake.UpdateClusterServiceBrokerCredentialsStub != nil {
		return fake.UpdateClusterServiceBrokerCredentialsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateClusterServiceBrokerCredentialsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubernetesAPI) UpdateClusterServiceBrokerCredentialsCallCount() int {
	fake.updateClusterServiceBrokerCredentialsMutex.RLock()
	defer fake.updateClusterServiceBrokerCredentialsMutex.RUnlock()
	return len(fake.updateClusterServiceBrokerCredentialsArgsForCall)
}

func (fake *FakeKubernetesAPI) UpdateClusterServiceBrokerCredentialsCalls(stub func(*v1.Secret) (*v1.Secret, error)) {
	fake.updateClusterServiceBrokerCredentialsMutex.Lock()
	defer fake.updateClusterServiceBrokerCredentialsMutex.Unlock()
	fake.UpdateClusterServiceBrokerCredentialsStub = stub
}

func (fake *FakeKubernetesAPI) UpdateClusterServiceBrokerCredentialsArgsForCall(i int) *v1.Secret {
	fake.updateClusterServiceBrokerCredentialsMutex.RLock()
	defer fake.updateClusterServiceBrokerCredentialsMutex.RUnlock()
	argsForCall := fake.updateClusterServiceBrokerCredentialsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKubernetesAPI) UpdateClusterServiceBrokerCredentialsReturns(result1 *v1.Secret, result2 error) {
	fake.updateClusterServiceBrokerCredentialsMutex.Lock()
	defer fake.updateClusterServiceBrokerCredentialsMutex.Unlock()
	fake.UpdateClusterServiceBrokerCredentialsStub = nil
	fake.updateClusterServiceBrokerCredentialsReturns = struct {
		result1 *v1.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) UpdateClusterServiceBrokerCredentialsReturnsOnCall(i int, result1 *v1.Secret, result2 error) {
	fake.updateClusterServiceBrokerCredentialsMutex.Lock()
	defer fake.updateClusterServiceBrokerCredentialsMutex.Unlock()
	fake.UpdateClusterServiceBrokerCredentialsStub = nil
	if fake.updateClusterServiceBrokerCredentialsReturnsOnCall == nil {
		fake.updateClusterServiceBrokerCredentialsReturnsOnCall = make(map[int]struct {
			result1 *v1.Secret
			result2 error
		})
	}
	fake.updateClusterServiceBrokerCredentialsReturnsOnCall[i] = struct {
		result1 *v1.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeKubernetesAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createClusterServiceBrokerMutex.RLock()
	defer fake.createClusterServiceBrokerMutex.RUnlock()
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	fake.deleteClusterServiceBrokerMutex.RLock()
	defer fake.deleteClusterServiceBrokerMutex.RUnlock()
	fake.retrieveClusterServiceBrokerByNameMutex.RLock()
	defer fake.retrieveClusterServiceBrokerByNameMutex.RUnlock()
	fake.retrieveClusterServiceBrokersMutex.RLock()
	defer fake.retrieveClusterServiceBrokersMutex.RUnlock()
	fake.syncClusterServiceBrokerMutex.RLock()
	defer fake.syncClusterServiceBrokerMutex.RUnlock()
	fake.updateClusterServiceBrokerMutex.RLock()
	defer fake.updateClusterServiceBrokerMutex.RUnlock()
	fake.updateClusterServiceBrokerCredentialsMutex.RLock()
	defer fake.updateClusterServiceBrokerCredentialsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeKubernetesAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.KubernetesAPI = new(FakeKubernetesAPI)
